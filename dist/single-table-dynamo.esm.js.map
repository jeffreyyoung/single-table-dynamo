{"version":3,"file":"single-table-dynamo.esm.js","sources":["../src/AWS.ts","../src/utils.ts","../src/createTable.ts","../src/config.ts","../src/getRepository.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/ensureTableAndIndexesAreCreated.ts"],"sourcesContent":["import AWS from 'aws-sdk';\nimport { ConfigurationOptions } from 'aws-sdk/lib/config';\n\nlet _docClient = new AWS.DynamoDB.DocumentClient();\n\nfunction getDocClient() {\n  return _docClient;\n}\n\nexport { AWS, getDocClient };\n\nexport function WORKAROUND_updateAWSConfig(ops: ConfigurationOptions) {\n  AWS.config.update(ops);\n  _docClient = new AWS.DynamoDB.DocumentClient(ops);\n}\n","import { SingleTableDocument } from './SingleTableDocument';\n\nexport type KeyOfStr<T> = Extract<keyof T, string>;\n/**\n *\n * Each Local Secondary Index is named lsi1, lsi2, ... or lsi3\n * This function should be used when executing a query with a LSI\n *\n * @param i\n */\nexport function getLSIName<T>(which: number): KeyOfStr<SingleTableDocument<T>> {\n  return `lsi${which}` as any;\n}\n\nexport function getLSISortKeyAttribute<T>(\n  which: number\n): KeyOfStr<SingleTableDocument<T>> {\n  return `lsi${which}` as any;\n}\n\nexport function getGSIName<T>(which: number): KeyOfStr<SingleTableDocument<T>> {\n  return `gsi${which}` as any;\n}\n\nexport function getGSIAttributeName<T>(\n  which: number,\n  type: 'Sort' | 'Hash'\n): KeyOfStr<SingleTableDocument<T>> {\n  return `gsi${type}${which}` as any;\n}\n","import { getLSIName, getLSISortKeyAttribute } from './utils';\nimport { AWS } from './AWS';\nimport {\n  CreateTableInput,\n  LocalSecondaryIndex,\n} from 'aws-sdk/clients/dynamodb';\nimport { Index } from './config';\nexport type CreateTableArgs = {\n  tableName?: string;\n};\n\nlet defaultTableName = 'SingleTable';\n\nexport function getDefaultTableName() {\n  return defaultTableName;\n}\n\nexport function setDefaultTableName(newName: string) {\n  defaultTableName = newName;\n}\n\nfunction range(start: number, end: number) {\n  let nums = [];\n  for (let i = start; i <= end; i++) {\n    nums.push(i);\n  }\n  return nums;\n}\n\ntype LSI = {\n  indexName: string;\n  sortKeyAttributeName: string;\n};\n\nexport function getGSIDef(index: Index<any, any>) {\n  if (index.type === 'globalSecondaryIndex') {\n    return {\n      IndexName: index.indexName,\n      KeySchema: [\n        { AttributeName: index.hashKeyAttribute, KeyType: 'HASH' },\n        { AttributeName: index.sortKeyAttribute, KeyType: 'RANGE' },\n      ],\n      Projection: {\n        ProjectionType: 'INCLUDE',\n        NonKeyAttributes: ['data', 'objectType'],\n      },\n    };\n  }\n\n  throw {\n    message: `given index of type ${index.type}, expecting globalSecondaryIndex`,\n  };\n}\n\n// type GSI = {\n//     indexName: string\n//     sortKeyAttributeName: string\n//     hashKeyAttributeName: string\n// }\n/**\n *\n * Creates a table with 5 local secondary indexes\n *\n */\nexport function createTable(args: {\n  tableName: string;\n  indexes?: Index<any, any>[];\n}) {\n  var client = new AWS.DynamoDB();\n\n  let localSecondaryIndexes = range(0, 4).map<LSI>(i => ({\n    indexName: getLSIName(i),\n    sortKeyAttributeName: getLSISortKeyAttribute(i),\n  }));\n\n  let globalSecondaryIndexes = (args.indexes || []).map(i => getGSIDef(i));\n\n  let createTableInput: CreateTableInput = {\n    TableName: args.tableName || getDefaultTableName(),\n    KeySchema: [\n      { AttributeName: 'hashKey', KeyType: 'HASH' },\n      { AttributeName: 'sortKey', KeyType: 'RANGE' },\n    ],\n    AttributeDefinitions: [\n      { AttributeName: 'hashKey', AttributeType: 'S' },\n      { AttributeName: 'sortKey', AttributeType: 'S' },\n      ...localSecondaryIndexes.map(i => {\n        return { AttributeName: i.sortKeyAttributeName, AttributeType: 'S' };\n      }),\n      ...(args.indexes as Index<any, any>[]).map(i => ({\n        AttributeName: i.sortKeyAttribute,\n        AttributeType: 'S',\n      })),\n      ...(args.indexes as Index<any, any>[]).map(i => ({\n        AttributeName: i.hashKeyAttribute,\n        AttributeType: 'S',\n      })),\n    ],\n    LocalSecondaryIndexes: [\n      ...localSecondaryIndexes.map<LocalSecondaryIndex>(i => ({\n        IndexName: i.indexName,\n        KeySchema: [\n          { AttributeName: 'hashKey', KeyType: 'HASH' },\n          { AttributeName: i.sortKeyAttributeName, KeyType: 'RANGE' },\n        ],\n        Projection: {\n          ProjectionType: 'INCLUDE',\n          NonKeyAttributes: ['data', 'objectType'],\n        },\n      })),\n    ],\n    GlobalSecondaryIndexes: globalSecondaryIndexes,\n    BillingMode: 'PAY_PER_REQUEST',\n  };\n\n  return client.createTable(createTableInput).promise();\n}\n","import { SingleTableDocument } from './SingleTableDocument';\nimport {\n  KeyOfStr,\n  getLSISortKeyAttribute,\n  getGSIAttributeName,\n  getGSIName,\n  getLSIName,\n} from './utils';\nimport { getDefaultTableName } from './createTable';\n\nexport type PropList<T> = KeyOfStr<T>[];\nexport type PropList2<A, B> = (KeyOfStr<A> | KeyOfStr<B>)[];\ntype BaseIndex<ID, T> = {\n  hashKeyFields: PropList2<ID, T>;\n  hashKeyDescriptor: string;\n  hashKeyAttribute: keyof SingleTableDocument<T>;\n\n  sortKeyFields: PropList2<ID, T>;\n  sortKeyDescriptor: string;\n  sortKeyAttribute: keyof SingleTableDocument<T>;\n\n  tag?: string;\n};\nexport type Index<ID, T> = (\n  | { type: 'primaryIndex' }\n  | {\n      type: 'localSecondaryIndex' | 'globalSecondaryIndex';\n      indexName: string;\n    }) &\n  BaseIndex<ID, T>;\n\nexport function getPrimaryIndex<ID, T>(\n  config: ConfigArgs<ID, T>,\n  tag: string = ''\n): Index<ID, T> {\n  return {\n    hashKeyFields: config.hashKeyFields,\n    hashKeyDescriptor: config.objectName,\n    hashKeyAttribute: 'hashKey',\n\n    sortKeyFields: config.sortKeyFields || [],\n    sortKeyDescriptor: config.objectName,\n    sortKeyAttribute: 'sortKey',\n\n    type: 'primaryIndex',\n\n    tag,\n  };\n}\n\nfunction isPrimaryQueryArg(thing: any): thing is PrimaryQueryArg {\n  return thing && thing.isPrimary;\n}\n\nfunction isLSIQueryArg<T>(thing: any): thing is LSIQueryArg<T> {\n  return thing && thing.sortKeyFields && !thing.hashKeyFields;\n}\n\nfunction isGSIQueryArg<T>(thing: any): thing is GSIQueryArg<T> {\n  return thing && thing.sortKeyFields && thing.hashKeyFields;\n}\n\nexport function convertQueryArgToIndex<ID, T>(\n  queryName: string,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  let index = (config.queries || {})[queryName];\n  if (isPrimaryQueryArg(index)) {\n    return getPrimaryIndex(config, queryName);\n  } else if (isLSIQueryArg(index)) {\n    return getLSIIndex<ID, T>(queryName, index, config);\n  } else if (isGSIQueryArg(index)) {\n    return getGSIIndex<ID, T>(queryName, index, config);\n  } else {\n    throw { message: `${queryName} is not valid` };\n  }\n}\nexport function getLSIIndex<ID, T>(\n  queryName: string,\n  i: LSIQueryArg<T>,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  return {\n    hashKeyFields: config.hashKeyFields,\n    hashKeyDescriptor: config.objectName,\n    hashKeyAttribute: 'hashKey',\n\n    sortKeyFields: i.sortKeyFields,\n    sortKeyDescriptor: queryName,\n    sortKeyAttribute: getLSISortKeyAttribute<T>(\n      i.which\n    ) as keyof SingleTableDocument<T>,\n\n    indexName: getLSIName(i.which),\n\n    type: 'localSecondaryIndex',\n\n    tag: queryName,\n  };\n}\n\nexport function getGSIIndex<ID, T>(\n  queryName: string,\n  i: GSIQueryArg<T>,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  return {\n    hashKeyFields: i.hashKeyFields,\n    hashKeyDescriptor: config.objectName + '-' + queryName,\n    hashKeyAttribute: getGSIAttributeName(\n      i.which,\n      'Hash'\n    ) as keyof SingleTableDocument<T>,\n\n    sortKeyFields: i.sortKeyFields,\n    sortKeyDescriptor: queryName,\n    sortKeyAttribute: getGSIAttributeName(\n      i.which,\n      'Sort'\n    ) as keyof SingleTableDocument<T>,\n\n    indexName: getGSIName(i.which),\n\n    type: 'globalSecondaryIndex',\n\n    tag: queryName,\n  };\n}\n\ntype PrimaryQueryArg = {\n  isPrimary: true;\n};\n\ntype LSIQueryArg<T> = {\n  sortKeyFields: PropList<T>;\n  type?: 'localSecondaryIndex';\n  which: 0 | 1 | 2 | 3 | 4;\n};\n\ntype GSIQueryArg<T> = {\n  sortKeyFields: PropList<T>;\n  hashKeyFields: PropList<T>;\n  type?: 'globalSecondaryIndex';\n  which:\n    | 0\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19;\n};\n\nexport type ConfigArgs<ID, T, QueryNames = string> = {\n  tableName?: string;\n  objectName: string;\n  hashKeyFields: PropList<ID>;\n  sortKeyFields?: PropList<ID>;\n  compositeKeySeparator?: '#';\n  queries?: Record<\n    Extract<QueryNames, string>,\n    GSIQueryArg<T> | LSIQueryArg<T> | PrimaryQueryArg\n  >;\n};\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport function getConfig<ID, T>(\n  argsIn: PartialBy<ConfigArgs<ID, T>, 'queries'>\n): Config<ID, T> {\n  const args: ConfigArgs<ID, T> = Object.assign({ queries: {} }, argsIn);\n  let indexes = [\n    getPrimaryIndex(args),\n    ...(args.queries\n      ? Object.keys(args.queries).map(queryName =>\n          convertQueryArgToIndex(queryName, args)\n        )\n      : []),\n  ];\n\n  let indexesByTag = indexes.reduce((prev, index) => {\n    return {\n      ...prev,\n      [index.tag as string]: index,\n    };\n  }, {});\n\n  return Object.assign(\n    {\n      tableName: args.tableName || getDefaultTableName(),\n      compositeKeySeparator: args.compositeKeySeparator || '#',\n    },\n    {\n      objectName: args.objectName,\n      primaryIndex: indexes[0],\n      indexes,\n      indexesByTag,\n    }\n  );\n}\n\nexport type Config<ID, T, QueryNames = string> = Readonly<{\n  tableName: string;\n  objectName: string;\n  primaryIndex: Index<ID, T>;\n  indexes: Index<ID, T>[];\n  indexesByTag: Record<Extract<QueryNames, string>, Index<ID, T>>;\n  compositeKeySeparator: string;\n}>;\n","import { getDocClient } from './AWS';\nimport { SingleTableDocument } from './SingleTableDocument';\nimport { ConfigArgs, Index, Config, getConfig } from './config';\nimport { KeyOfStr } from './utils';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\n\nexport type WhereClause<T = any, QueryNames = string> = {\n  sort?: 'asc' | 'desc';\n  args: Partial<T>;\n  index?: QueryNames;\n  sortBy?: KeyOfStr<T>;\n  cursor?: Record<string, any>;\n  limit?: number;\n};\n\nexport type QueryResult<T> = {\n  results: T[];\n  nextPageArgs?: WhereClause<T>;\n};\n\n/**\n *\n * @param thing\n * @param properties\n * @param descriptor\n * @param separator\n *\n * return \"{descriptor}#{properties[0]}-{thing[properties[0]]}#...\"\n */\nexport function getCompositeKeyValue<ID, T>(\n  thing: T,\n  properties: (keyof T | keyof ID)[],\n  descriptor: string,\n  separator: string\n) {\n  return [\n    descriptor,\n    ...properties.map(k =>\n      dynamoProperty(k as string, (thing[k as keyof T] as unknown) as string)\n    ),\n  ].join(separator);\n}\n\n/**\n *\n * To make generic dynamo fields more readable, they are saved in the following format\n * <fieldName>-<fieldValue>, eg userId-2039848932\n *\n * This function should be used whenever saving attributes to a composite index\n *\n * @param key\n * @param value\n */\nexport function dynamoProperty(key: string, value: string) {\n  return `${key}-${value}`;\n}\n\nexport function getSortkeyForBeginsWithQuery<ID, T>(\n  thing: Partial<T>,\n  indexFields: (keyof T | keyof ID)[],\n  descriptor: string,\n  compositeKeySeparator: string\n) {\n  let fields = [descriptor];\n  for (let i = 0; i < indexFields.length; i++) {\n    let k = indexFields[i];\n    if (k in thing) {\n      fields.push(dynamoProperty(k as string, String(thing[k as keyof T])));\n    } else {\n      break;\n    }\n  }\n  return fields.join(compositeKeySeparator);\n}\n\nexport function findIndexForQuery<ID, T, QueryNames>(\n  where: WhereClause<T>,\n  config: Config<ID, T, QueryNames>\n): Index<ID, T> | null {\n  if (where.index) {\n    if (config.indexesByTag[(where.index as unknown) as any]) {\n      return config.indexesByTag[(where.index as unknown) as any];\n    } else {\n      throw {\n        message: `The index \"${\n          where.index\n        }\" does not exist, the following are valid indexes: ${Object.keys(\n          config.indexesByTag\n        ).join(',')}`,\n      };\n    }\n  }\n\n  let indexes = config.indexes;\n\n  for (let i = 0; i < indexes.length; i++) {\n    let index = indexes[i];\n    let neededFields = new Set(Object.keys(where.args) as (\n      | keyof ID\n      | keyof T)[]);\n\n    //for this index to be eligible, we need every hashKey field to be provided in the query\n    let queryContainsAllHashKeyFields = index.hashKeyFields.every(k =>\n      neededFields.has(k)\n    );\n\n    //query contains all hash key fields\n    if (queryContainsAllHashKeyFields) {\n      index.hashKeyFields.forEach(k => neededFields.delete(k));\n      const sortKeyFieldIndex = neededFields.size;\n      //ensure that the first n fields of this index are included in the where clause\n      index.sortKeyFields\n        .slice(0, neededFields.size)\n        .forEach(k => neededFields.delete(k));\n\n      //all the specified fields are in the correct place for this index\n      if (neededFields.size === 0) {\n        //check if this config has a sort and if it's in the right place\n        if (where.sortBy) {\n          if (index.sortKeyFields.indexOf(where.sortBy) === sortKeyFieldIndex) {\n            return index;\n          }\n        } else {\n          return index;\n        }\n      }\n    }\n  }\n  return null;\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nfunction getKey<ID, T>(\n  id: ID | T,\n  i: Index<ID, T>,\n  separator: string\n): Partial<Omit<SingleTableDocument<T>, 'data'>> {\n  return {\n    [i.hashKeyAttribute]: getCompositeKeyValue(\n      id as any,\n      i.hashKeyFields as (keyof ID)[],\n      i.hashKeyDescriptor,\n      separator\n    ),\n    [i.sortKeyAttribute]: getCompositeKeyValue(\n      id as any,\n      i.sortKeyFields as (keyof ID)[],\n      i.sortKeyDescriptor,\n      separator\n    ),\n  };\n}\n\ntype Queries<T, QueryNames> = Record<\n  Extract<QueryNames, string>,\n  (where: WhereClause<T>) => Promise<QueryResult<T>>\n>;\n\nexport type Repository<ID = any, T = any, QueryNames = string> = {\n  config: Config<ID, T>;\n  getKey: (id: ID) => any;\n  get: (id: ID) => Promise<T | null>;\n  update: (id: ID, updates: Partial<T>) => Promise<T>;\n  overwrite: (thing: T) => Promise<T>;\n  put: (thing: T) => Promise<T>;\n  delete: (id: ID) => Promise<boolean>;\n  formatForDDB: (thing: T) => SingleTableDocument<T>;\n  executeQuery: (\n    where: WhereClause<T>,\n    index: Index<ID, T>\n  ) => Promise<QueryResult<T>>;\n  getQueryArgs(where: WhereClause<T>, index: Index<ID,T>): DocumentClient.QueryInput \n  query: (where: WhereClause<T>) => Promise<QueryResult<T>>;\n  queryOne: (where: WhereClause<T>) => Promise<T | null>;\n  findIndexForQuery: (where: WhereClause<T>) => Index<ID, T> | null;\n  queries: Queries<T, QueryNames>;\n};\n\n//const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport function getRepository<ID, T, QueryNames = string>(\n  args: ConfigArgs<ID, T, QueryNames>\n): Repository<ID, T, QueryNames> {\n  let config = getConfig(args);\n  let repo: Repository<ID, T, QueryNames> = {\n    get config() {\n      return config;\n    },\n    getKey: (id: ID) => {\n      return getKey(id, config.primaryIndex, config.compositeKeySeparator);\n    },\n    get: async (id: ID): Promise<T | null> => {\n      let res = await getDocClient()\n        .get({\n          TableName: config.tableName,\n          Key: repo.getKey(id),\n        })\n        .promise();\n      if (!res.Item) {\n        return null;\n      }\n      return (res.Item as any).data;\n    },\n    update: async (id: ID, thing: Partial<T>): Promise<T> => {\n      let old = (await repo.get(id)) as T;\n      let updated = { ...old, ...thing };\n      return repo.overwrite(updated);\n    },\n    put: (thing: T): Promise<T> => {\n      return repo.overwrite(thing);\n    },\n    overwrite: async (thing: T): Promise<T> => {\n      await getDocClient()\n        .put({\n          TableName: config.tableName,\n          Item: repo.formatForDDB(thing),\n        })\n        .promise();\n      return thing;\n    },\n    delete: async (id: ID): Promise<boolean> => {\n      await getDocClient()\n        .delete({\n          TableName: config.tableName,\n          Key: repo.getKey(id),\n        })\n        .promise();\n\n      return true;\n    },\n    getQueryArgs(where: WhereClause<T>, index: Index<ID,T>): DocumentClient.QueryInput {\n      const hashKey = getCompositeKeyValue<ID, T>(\n        where.args as T,\n        index.hashKeyFields,\n        index.hashKeyDescriptor,\n        config.compositeKeySeparator\n      );\n      const sortKey =\n        index.sortKeyFields &&\n        getSortkeyForBeginsWithQuery<ID, T>(\n          where.args,\n          index.sortKeyFields,\n          index.sortKeyDescriptor,\n          config.compositeKeySeparator\n        );\n\n      return {\n          TableName: config.tableName,\n          ...((index as any).indexName && {\n            IndexName: (index as any).indexName,\n          }),\n          Limit: where.limit || 5,\n          ScanIndexForward: where.sort === 'asc',\n          KeyConditionExpression: `${index.hashKeyAttribute} = :hKey and begins_with(${index.sortKeyAttribute}, :sKey) `,\n          ExpressionAttributeValues: {\n            ':hKey': hashKey,\n            ':sKey': sortKey,\n          },\n          ...(where.cursor && {\n            ExclusiveStartKey: where.cursor,\n          }),\n        };\n    },\n    executeQuery: async (\n      where: WhereClause<T>,\n      index: Index<ID, T>\n    ): Promise<QueryResult<T>> => {\n      \n      let res = await getDocClient()\n        .query(repo.getQueryArgs(where, index))\n        .promise();\n\n      let nextWhere: WhereClause<T> | undefined = res &&\n        res.LastEvaluatedKey && {\n          ...where,\n          cursor: (res as any).LastEvaluatedKey,\n        };\n\n      return {\n        results: (res as any).Items.map((i: SingleTableDocument<T>) => {\n          return i.data;\n        }),\n        nextPageArgs: nextWhere,\n      };\n    },\n    query: async (where: WhereClause<T>): Promise<QueryResult<T>> => {\n      let index = findIndexForQuery<ID, T, QueryNames>(where, config);\n\n      if (!index) {\n        throw { message: 'there isnt an index configured for this query' };\n      }\n\n      return repo.executeQuery(where, index);\n    },\n    queryOne: async (argsIn: WhereClause<T>): Promise<T | null> => {\n      const args = { ...argsIn, limit: 1 };\n      const res = await repo.query(args);\n      if (res.results.length > 0) {\n        return res.results[0];\n      } else {\n        return null;\n      }\n    },\n    formatForDDB(thing: T) {\n      let obj: Partial<SingleTableDocument<T>> = {\n        data: thing,\n        objectType: config.objectName,\n      };\n\n      config.indexes.forEach(i => {\n        obj = {\n          ...obj,\n          ...getKey(thing, i, config.compositeKeySeparator),\n        };\n      });\n\n      return obj as SingleTableDocument<T>;\n    },\n    findIndexForQuery: (where: WhereClause<T>) => {\n      return findIndexForQuery<ID, T, QueryNames>(where, config);\n    },\n    queries: Object.keys(config.indexesByTag).reduce(\n      (obj: any, key: string) => {\n        obj[key] = (where: WhereClause<T>) =>\n          repo.executeQuery(where, config.indexesByTag[key]);\n        return obj;\n      },\n      {}\n    ) as Queries<T, QueryNames>,\n  };\n  return repo;\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { AWS } from './AWS';\nimport { Repository } from './getRepository';\nimport { Index } from './config';\nimport { createTable, getGSIDef } from './createTable';\n\nexport async function ensureTableAndIndexesExist(repos: Repository[]) {\n  console.log(AWS.config.region);\n  let tables: {\n    [tableName: string]: {\n      [indexName: string]: Index<any, any>;\n    };\n  } = {};\n\n  repos\n    .map(c => c.config)\n    .forEach(c => {\n      if (!tables[c.tableName]) {\n        tables[c.tableName] = {};\n      }\n      c.indexes.forEach(i => {\n        if (i.type === 'globalSecondaryIndex') {\n          tables[c.tableName][i.indexName] = i;\n        }\n      });\n    });\n\n  let tableNames = Object.keys(tables);\n\n  for (let i = 0; i < tableNames.length; i++) {\n    let tableName = tableNames[i];\n    await ensureTableIsConfigured(tableNames[i], tables[tableName]);\n  }\n}\n\nasync function getTableDescription(\n  client: AWS.DynamoDB,\n  tableName: string\n): Promise<AWS.DynamoDB.TableDescription | null> {\n  try {\n    let description = await client\n      .describeTable({ TableName: tableName })\n      .promise();\n\n    if (description.Table) {\n      console.log('returning table description!!!!');\n      return description.Table;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  console.log('returning nullll');\n  return null;\n}\n\nasync function ensureTableIsConfigured(\n  tableName: string,\n  indexes: Record<string, Index<any, any>>\n) {\n  const client = new AWS.DynamoDB();\n  console.log(`checking if the table \"${tableName}\" has already been created`);\n\n  let table = await getTableDescription(client, tableName);\n  let indexesToBeCreated = { ...indexes };\n\n  if (!table) {\n    let ins = Object.values(indexesToBeCreated);\n    console.log(`table \"${tableName}\" does not exist, creating it now`);\n    await createTable({ tableName, indexes: ins });\n    console.log(\n      `table \"${tableName}\" created with the following indexes ${Object.keys(\n        indexesToBeCreated\n      ).join(',')}`\n    );\n    return;\n  }\n\n  console.log(`table \"${tableName}\" already exists, checking the indexes`);\n\n  if (table) {\n    (table.GlobalSecondaryIndexes || []).forEach(i => {\n      delete indexesToBeCreated[i.IndexName || ''];\n    });\n  }\n  let toCreate = Object.values(indexesToBeCreated);\n  if (toCreate.length > 0) {\n    console.log(\n      `creating the following indexes ${Object.keys(indexesToBeCreated).join(\n        ','\n      )} to table ${tableName}`\n    );\n    await client\n      .updateTable({\n        TableName: tableName,\n        GlobalSecondaryIndexUpdates: toCreate.map(i => ({\n          Create: getGSIDef(i),\n        })),\n      })\n      .promise();\n  } else {\n    console.log(`the table ${tableName} has all the necessary indexes`);\n  }\n}\n"],"names":["_docClient","AWS","DynamoDB","DocumentClient","getDocClient","WORKAROUND_updateAWSConfig","ops","config","update","getLSIName","which","getLSISortKeyAttribute","getGSIName","getGSIAttributeName","type","defaultTableName","getDefaultTableName","setDefaultTableName","newName","range","start","end","nums","i","push","getGSIDef","index","IndexName","indexName","KeySchema","AttributeName","hashKeyAttribute","KeyType","sortKeyAttribute","Projection","ProjectionType","NonKeyAttributes","message","createTable","args","client","localSecondaryIndexes","map","sortKeyAttributeName","globalSecondaryIndexes","indexes","createTableInput","TableName","tableName","AttributeDefinitions","AttributeType","LocalSecondaryIndexes","GlobalSecondaryIndexes","BillingMode","promise","getPrimaryIndex","tag","hashKeyFields","hashKeyDescriptor","objectName","sortKeyFields","sortKeyDescriptor","isPrimaryQueryArg","thing","isPrimary","isLSIQueryArg","isGSIQueryArg","convertQueryArgToIndex","queryName","queries","getLSIIndex","getGSIIndex","getConfig","argsIn","Object","assign","keys","indexesByTag","reduce","prev","compositeKeySeparator","primaryIndex","getCompositeKeyValue","properties","descriptor","separator","k","dynamoProperty","join","key","value","getSortkeyForBeginsWithQuery","indexFields","fields","length","String","findIndexForQuery","where","neededFields","Set","queryContainsAllHashKeyFields","every","has","forEach","sortKeyFieldIndex","size","slice","sortBy","indexOf","getKey","id","getRepository","repo","get","Key","res","Item","data","old","updated","overwrite","put","formatForDDB","getQueryArgs","hashKey","sortKey","Limit","limit","ScanIndexForward","sort","KeyConditionExpression","ExpressionAttributeValues","cursor","ExclusiveStartKey","executeQuery","query","nextWhere","LastEvaluatedKey","results","Items","nextPageArgs","queryOne","obj","objectType","ensureTableIsConfigured","console","log","getTableDescription","table","indexesToBeCreated","toCreate","values","updateTable","GlobalSecondaryIndexUpdates","Create","ins","describeTable","description","Table","e","ensureTableAndIndexesExist","repos","region","tables","c","tableNames"],"mappings":"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"}