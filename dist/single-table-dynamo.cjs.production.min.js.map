{"version":3,"file":"single-table-dynamo.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/AWS.ts","../src/SingleTableDocument.ts","../src/utils.ts","../src/createTable.ts","../src/config.ts","../src/getRepository.ts","../src/ensureTableAndIndexesAreCreated.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import AWS from 'aws-sdk';\nimport { ConfigurationOptions } from 'aws-sdk/lib/config';\n\nlet _docClient = new AWS.DynamoDB.DocumentClient();\n\nfunction getDocClient() {\n  return _docClient;\n}\n\nexport { AWS, getDocClient };\n\nexport function WORKAROUND_updateAWSConfig(ops: ConfigurationOptions, docClientOptions?: AWS.DynamoDB.DocumentClient.DocumentClientOptions) {\n  AWS.config.update(ops);\n  _docClient = new AWS.DynamoDB.DocumentClient({\n    ...ops,\n    ...docClientOptions\n  });\n}\n","\nexport function getDataFromDocument<T>(doc: SingleTableDocumentWithData<T>): T | null{\n  if (!doc) {\n    return null;\n  }\n  let res = {};\n  Object.keys(doc).forEach(key => {\n    if (!key.startsWith('__')) {\n      res[key] = doc[key];\n    }\n  });\n\n  return res as T;\n}\n\nexport type SingleTableDocumentWithData<T> = SingleTableDocument & T;\n\nexport type SingleTableDocument = {\n  __hashKey: string;\n  __sortKey?: string;\n\n  __objectType: string;\n\n  //sparse local secondary indexes that may or not be defined\n  __lsi0?: string;\n  __lsi1?: string;\n  __lsi2?: string;\n  __lsi3?: string;\n  __lsi4?: string;\n\n  //sparse global indexes that may or not be defined\n  __gsiHash0?: string;\n  __gsiSort0?: string;\n\n  __gsiHash1?: string;\n  __gsiSort1?: string;\n\n  __gsiHash2?: string;\n  __gsiSort2?: string;\n\n  __gsiHash3?: string;\n  __gsiSort3?: string;\n\n  __gsiHash4?: string;\n  __gsiSort4?: string;\n\n  __gsiHash5?: string;\n  __gsiSort5?: string;\n\n  __gsiHash6?: string;\n  __gsiSort6?: string;\n\n  __gsiHash7?: string;\n  __gsiSort7?: string;\n\n  __gsiHash8?: string;\n  __gsiSort8?: string;\n\n  __gsiHash9?: string;\n  __gsiSort9?: string;\n\n  __gsiHash10?: string;\n  __gsiSort10?: string;\n\n  __gsiHash11?: string;\n  __gsiSort11?: string;\n};\n","import { SingleTableDocument } from './SingleTableDocument';\n\nexport type KeyOfStr<T> = Extract<keyof T, string>;\n/**\n *\n * Each Local Secondary Index is named lsi1, lsi2, ... or lsi3\n * This function should be used when executing a query with a LSI\n *\n * @param i\n */\nexport function getLSIName(which: number): KeyOfStr<SingleTableDocument> {\n  return `__lsi${which}` as any;\n}\n\nexport function getLSISortKeyAttribute(\n  which: number\n): KeyOfStr<SingleTableDocument> {\n  return `__lsi${which}` as any;\n}\n\nexport function getGSIName(which: number): KeyOfStr<SingleTableDocument> {\n  return `__gsi${which}` as any;\n}\n\nexport function getGSIAttributeName(\n  which: number,\n  type: 'Sort' | 'Hash'\n): KeyOfStr<SingleTableDocument> {\n  return `__gsi${type}${which}` as any;\n}\n\n\nexport const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));","import { getLSIName, getLSISortKeyAttribute } from './utils';\nimport { AWS } from './AWS';\nimport {\n  CreateTableInput,\n  LocalSecondaryIndex,\n} from 'aws-sdk/clients/dynamodb';\nimport { Index } from './config';\n\nexport type CreateTableArgs = {\n  tableName?: string;\n};\n\nlet defaultTableName = 'SingleTable';\n\nexport function getDefaultTableName() {\n  return defaultTableName;\n}\n\nexport function setDefaultTableName(newName: string) {\n  defaultTableName = newName;\n}\n\nfunction range(start: number, end: number) {\n  let nums = [];\n  for (let i = start; i <= end; i++) {\n    nums.push(i);\n  }\n  return nums;\n}\n\ntype LSI = {\n  indexName: string;\n  sortKeyAttributeName: string;\n};\n\nexport function getGSIDef(index: Index<any, any>) {\n  if (index.type === 'globalSecondaryIndex') {\n    return {\n      IndexName: index.indexName,\n      KeySchema: [\n        { AttributeName: index.hashKeyAttribute, KeyType: 'HASH' },\n        { AttributeName: index.sortKeyAttribute, KeyType: 'RANGE' },\n      ],\n      Projection: {\n        ProjectionType: 'ALL',\n      },\n    };\n  }\n\n  throw {\n    message: `given index of type ${index.type}, expecting globalSecondaryIndex`,\n  };\n}\n\n// type GSI = {\n//     indexName: string\n//     sortKeyAttributeName: string\n//     hashKeyAttributeName: string\n// }\n/**\n *\n * Creates a table with 5 local secondary indexes\n *\n */\nexport function createTable(args: {\n  tableName: string;\n  indexes?: Index<any, any>[];\n}) {\n  var client = new AWS.DynamoDB();\n\n  let localSecondaryIndexes = range(0, 4).map<LSI>(i => ({\n    indexName: getLSIName(i),\n    sortKeyAttributeName: getLSISortKeyAttribute(i),\n  }));\n\n  let globalSecondaryIndexes = (args.indexes || []).map(i => getGSIDef(i));\n\n  let createTableInput: CreateTableInput = {\n    TableName: args.tableName || getDefaultTableName(),\n    KeySchema: [\n      { AttributeName: '__hashKey', KeyType: 'HASH' },\n      { AttributeName: '__sortKey', KeyType: 'RANGE' },\n    ],\n    AttributeDefinitions: [\n      { AttributeName: '__hashKey', AttributeType: 'S' },\n      { AttributeName: '__sortKey', AttributeType: 'S' },\n      ...localSecondaryIndexes.map(i => ({\n        AttributeName: i.sortKeyAttributeName,\n        AttributeType: 'S' }\n      )),\n      ...(args.indexes as Index<any, any>[]).map(i => ({\n        AttributeName: i.sortKeyAttribute,\n        AttributeType: 'S',\n      })),\n      ...(args.indexes as Index<any, any>[]).map(i => ({\n        AttributeName: i.hashKeyAttribute,\n        AttributeType: 'S',\n      })),\n    ],\n    LocalSecondaryIndexes: [\n      ...localSecondaryIndexes.map<LocalSecondaryIndex>(i => ({\n        IndexName: i.indexName,\n        KeySchema: [\n          { AttributeName: '__hashKey', KeyType: 'HASH' },\n          { AttributeName: i.sortKeyAttributeName, KeyType: 'RANGE' },\n        ],\n        Projection: {\n          ProjectionType: 'ALL',\n        },\n      })),\n    ],\n    GlobalSecondaryIndexes: globalSecondaryIndexes,\n    BillingMode: 'PAY_PER_REQUEST',\n  };\n\n  if (createTableInput.LocalSecondaryIndexes!.length === 0) {\n    delete createTableInput.LocalSecondaryIndexes;\n  }\n  if (createTableInput.GlobalSecondaryIndexes!.length ===0) {\n    delete createTableInput.GlobalSecondaryIndexes;\n  }\n  return client.createTable(createTableInput).promise()\n    .then(() => client.waitFor('tableExists', {TableName: createTableInput.TableName}))\n    .then(() => console.log(`${createTableInput.TableName} has been created`));\n}\n","import { SingleTableDocument } from './SingleTableDocument';\nimport {\n  KeyOfStr,\n  getLSISortKeyAttribute,\n  getGSIAttributeName,\n  getGSIName,\n  getLSIName,\n} from './utils';\nimport { getDefaultTableName } from './createTable';\n\nexport type PropList<T> = KeyOfStr<T>[];\nexport type PropList2<A, B> = (KeyOfStr<A> | KeyOfStr<B>)[];\ntype BaseIndex<ID, T> = {\n  isCustomIndex: boolean,\n  hashKeyFields: PropList2<ID, T>;\n  hashKeyDescriptor: string;\n  hashKeyAttribute: keyof SingleTableDocument | KeyOfStr<T>;\n\n  sortKeyFields: PropList2<ID, T>;\n  sortKeyDescriptor: string;\n  sortKeyAttribute: keyof SingleTableDocument | KeyOfStr<T>;\n\n  tag?: string;\n};\nexport type Index<ID, T> = (\n  | { type: 'primaryIndex' }\n  | {\n      type: 'localSecondaryIndex' | 'globalSecondaryIndex';\n      indexName: string;\n    }) &\n  BaseIndex<ID, T>;\n\nexport function getPrimaryIndex<ID, T>(\n  config: ConfigArgs<ID, T>,\n  tag: string = ''\n): Index<ID, T> {\n  return {\n    isCustomIndex: false,\n    hashKeyFields: config.hashKeyFields,\n    hashKeyDescriptor: config.objectName,\n    hashKeyAttribute: '__hashKey',\n\n    sortKeyFields: config.sortKeyFields || [],\n    sortKeyDescriptor: config.objectName,\n    sortKeyAttribute: '__sortKey',\n\n    type: 'primaryIndex',\n\n    tag,\n  };\n}\n\nfunction isPrimaryQueryArg(thing: any): thing is PrimaryQueryArg {\n  return thing && thing.isPrimary;\n}\n\nfunction isLSIQueryArg<T>(thing: any): thing is LSIQueryArg<T> {\n  return thing && thing.sortKeyFields && !thing.hashKeyFields;\n}\n\nfunction isGSIQueryArg<T>(thing: any): thing is GSIQueryArg<T> {\n  return thing && thing.sortKeyFields && thing.hashKeyFields;\n}\n\nfunction isCustomGSIQueryArg<T>(thing: any): thing is CustomGSIQueryArg<T> {\n  return thing && thing.hashKeyAttributeName && thing.sortKeyAttributeName;\n}\n\nexport function convertQueryArgToIndex<ID, T>(\n  queryName: string,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  let index = (config.indexes || {})[queryName];\n  if (isPrimaryQueryArg(index)) {\n    return getPrimaryIndex(config, queryName);\n  } else if (isLSIQueryArg(index)) {\n    return getLSIIndex<ID, T>(queryName, index, config);\n  } else if (isGSIQueryArg(index)) {\n    return getGSIIndex<ID, T>(queryName, index, config);\n  } else if (isCustomGSIQueryArg(index)) {\n    return getCustomGSIIndex<ID, T>(queryName, index, config);\n  } else {\n    throw { message: `${queryName} is not valid` };\n  }\n}\nexport function getLSIIndex<ID, T>(\n  queryName: string,\n  i: LSIQueryArg<T>,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  return {\n    isCustomIndex: false,\n    hashKeyFields: config.hashKeyFields,\n    hashKeyDescriptor: config.objectName,\n    hashKeyAttribute: '__hashKey',\n\n    sortKeyFields: i.sortKeyFields,\n    sortKeyDescriptor: queryName,\n    sortKeyAttribute: getLSISortKeyAttribute(\n      i.which\n    ) as keyof SingleTableDocument,\n\n    indexName: getLSIName(i.which),\n\n    type: 'localSecondaryIndex',\n\n    tag: queryName,\n  };\n}\n\nexport function getCustomGSIIndex<ID, T>(\n  queryName: string,\n  i: CustomGSIQueryArg<T>,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  return {\n    isCustomIndex: true,\n    hashKeyFields: [],\n    hashKeyDescriptor: config.objectName + '-' + queryName,\n    hashKeyAttribute: i.hashKeyAttributeName,\n\n    sortKeyFields: [],\n    sortKeyDescriptor: queryName,\n    sortKeyAttribute: i.sortKeyAttributeName,\n\n    indexName: i.indexName || queryName,\n\n    type: 'globalSecondaryIndex',\n\n    tag: queryName,\n  }\n}\n\nexport function getGSIIndex<ID, T>(\n  queryName: string,\n  i: GSIQueryArg<T>,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  return {\n    isCustomIndex: false,\n    hashKeyFields: i.hashKeyFields,\n    hashKeyDescriptor: config.objectName + '-' + queryName,\n    hashKeyAttribute: getGSIAttributeName(\n      i.which,\n      'Hash'\n    ) as keyof SingleTableDocument,\n\n    sortKeyFields: i.sortKeyFields,\n    sortKeyDescriptor: queryName,\n    sortKeyAttribute: getGSIAttributeName(\n      i.which,\n      'Sort'\n    ) as keyof SingleTableDocument,\n\n    indexName: getGSIName(i.which),\n\n    type: 'globalSecondaryIndex',\n\n    tag: queryName,\n  };\n}\n\ntype PrimaryQueryArg = {\n  isPrimary: true;\n};\n\ntype LSIQueryArg<T> = {\n  sortKeyFields: PropList<T>;\n  type?: 'localSecondaryIndex';\n  which: 0 | 1 | 2 | 3 | 4;\n};\n\ntype CustomGSIQueryArg<T> = {\n  type: 'globalSecondaryIndex'\n  hashKeyAttributeName: KeyOfStr<T>,\n  sortKeyAttributeName: KeyOfStr<T>,\n  indexName?: string\n}\n\ntype GSIQueryArg<T> = {\n  sortKeyFields: PropList<T>;\n  hashKeyFields: PropList<T>;\n  type?: 'globalSecondaryIndex';\n  which:\n    | 0\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19;\n};\n\nexport type ConfigArgs<ID, T, QueryNames = string> = {\n  tableName?: string;\n  objectName: string;\n  hashKeyFields: PropList<ID>;\n  sortKeyFields?: PropList<ID>;\n  compositeKeySeparator?: '#';\n  shouldPadNumbersInIndexes?: boolean,\n  paddedNumberLength?: number,\n  indexes?: Record<\n    Extract<QueryNames, string>,\n    GSIQueryArg<T> | LSIQueryArg<T> | PrimaryQueryArg | CustomGSIQueryArg<T>\n  >;\n};\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport function getConfig<ID, T>(\n  argsIn: PartialBy<ConfigArgs<ID, T>, 'indexes'>\n): Config<ID, T> {\n  const args: ConfigArgs<ID, T> = Object.assign({\n    shouldPadNumbersInIndexes: true,\n    paddedNumberLength: 20,\n    queries: {}\n  }, argsIn);\n  let indexes = [\n    getPrimaryIndex(args),\n    ...(args.indexes\n      ? Object.keys(args.indexes).map(queryName =>\n          convertQueryArgToIndex(queryName, args)\n        )\n      : []),\n  ];\n\n  let indexesByTag = indexes.reduce((prev, index) => {\n    return {\n      ...prev,\n      [index.tag as string]: index,\n    };\n  }, {});\n\n  return Object.assign(\n    {\n      tableName: args.tableName || getDefaultTableName(),\n      compositeKeySeparator: args.compositeKeySeparator || '#',\n      shouldPadNumbersInIndexes: args.shouldPadNumbersInIndexes!,\n      paddedNumberLength: args.paddedNumberLength || 20\n    },\n    {\n      objectName: args.objectName,\n      primaryIndex: indexes[0],\n      indexes,\n      indexesByTag,\n    }\n  );\n}\n\nexport type Config<ID, T, QueryNames = string> = Readonly<{\n  tableName: string;\n  objectName: string;\n  primaryIndex: Index<ID, T>;\n  indexes: Index<ID, T>[];\n  paddedNumberLength: number\n  shouldPadNumbersInIndexes: boolean\n  indexesByTag: Record<Extract<QueryNames, string>, Index<ID, T>>;\n  compositeKeySeparator: string;\n}>;\n","import { getDocClient } from './AWS';\nimport { SingleTableDocument, SingleTableDocumentWithData, getDataFromDocument } from './SingleTableDocument';\nimport { ConfigArgs, Index, Config, getConfig } from './config';\nimport { KeyOfStr } from './utils';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\n\nclass QueryBuilder<ID = any, T = any, IndexNames = string> {\n  clause: WhereClause<T, IndexNames>;\n  repo: Repository<ID, T, IndexNames>\n\n  constructor(repo: Repository<ID, T, IndexNames>) {\n    this.clause = {\n      args: {},\n    }\n    this.repo = repo;\n  }\n\n  where(parts: Partial<T>) {\n    this.clause.args = parts;\n    return this;\n  }\n\n  sortBy(key: KeyOfStr<T>) {\n    this.clause.sortBy = key;\n    return this;\n  }\n\n  sortDirection(direction: 'asc' | 'desc') {\n    this.clause.sort = direction;\n    return this;\n  }\n\n  index(index: IndexNames) {\n    this.clause.index = index;\n    return this;\n  }\n\n  cursor(cursor: Record<string,any>) {\n    this.clause.cursor = cursor;\n    return this;\n  }\n\n  limit(limit: number) {\n    this.clause.limit = limit;\n    return this;\n  }\n\n  setClause(clause: WhereClause<T, IndexNames>) {\n    this.clause = clause;\n    return this;\n  }\n\n  get() {\n    let index = this.repo.findIndexForQuery(this.clause);\n\n    if (!index) {\n      throw { message: 'there isnt an index configured for this query' };\n    }\n\n    return this.repo.executeQuery(this.clause, index);\n  }\n\n  async getOne(): Promise<T | null> {\n    const res = await this.limit(1).get();\n    if (res.results.length > 0) {\n      return res.results[0];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Repeatedly pages over the given query until all items have been queried\n   * If a query has more pages than fit in memory, errors will happen\n   */\n  async getAll() {\n    let res = await this.get();\n    while (res.nextPageArgs) {\n      let next = await this.setClause(res.nextPageArgs as any).get();\n      res = {\n        results: res.results.concat(next.results),\n        nextPageArgs: next.nextPageArgs\n      }\n    };\n    return res;\n  }\n\n  async deleteAll() {\n    let hasMore = true;\n    //the max items for batch delete is 25\n    //todo: limit paging to 25 in batchDelete\n    let res = await this.limit(25).get();\n    while (hasMore) {\n      await this.repo.batchDelete(res.results as any);\n      if (res.nextPageArgs) {\n        res = await this.setClause(res.nextPageArgs as any).get();\n      } else {\n        hasMore = false;\n      }\n    };\n    return true;\n  }\n}\n\n\nexport type WhereClause<T = any, IndexNames = string> = {\n  sort?: 'asc' | 'desc';\n  args: Partial<T>;\n  index?: IndexNames;\n  sortBy?: KeyOfStr<T>;\n  cursor?: Record<string, any>;\n  limit?: number;\n};\n\nexport type QueryResult<T> = {\n  results: T[];\n  nextPageArgs?: WhereClause<T>;\n};\n\n/**\n *\n * @param thing\n * @param properties\n * @param descriptor\n * @param separator\n *\n * return \"{descriptor}#{properties[0]}-{thing[properties[0]]}#...\"\n */\nexport function getCompositeKeyValue<ID, T>(\n  thing: T,\n  properties: (keyof T | keyof ID)[],\n  descriptor: string,\n  separator: string,\n  shouldPadNumbersInIndexes: boolean\n) {\n  return [\n    descriptor,\n    ...properties.map(k =>\n      dynamoProperty(k as string, thing[k as keyof T], shouldPadNumbersInIndexes)\n    ),\n  ].join(separator);\n}\n\nexport function getCustomKeyValue<T>(\n  thing: T,\n  propertyName: (keyof T)\n) {\n  return thing[propertyName];\n}\n\nfunction padDecimalNumber(value: number) {\n  let [before, after] = String(value).split('.');\n\n  return [(before || '').padStart(18, '0'), (after || '').padEnd(2, '0')].join('.')\n}\n\n/**\n *\n * To make generic dynamo fields more readable, they are saved in the following format\n * <fieldName>-<fieldValue>, eg userId-2039848932\n *\n * This function should be used whenever saving attributes to a composite index\n *\n * @param key\n * @param value\n */\nexport function dynamoProperty(key: string, value: any, shouldPadNumbersInIndexes: boolean) {\n  let stringified = String(value);\n  if (typeof value === 'number' && value >= 0 && shouldPadNumbersInIndexes) {\n    stringified = padDecimalNumber(value as number);\n  }\n  return `${key}-${stringified}`;\n}\n\nexport function getSortkeyForBeginsWithQuery<ID, T>(\n  thing: Partial<T>,\n  indexFields: (keyof T | keyof ID)[],\n  descriptor: string,\n  compositeKeySeparator: string,\n  shouldPadNumbersInIndexes: boolean\n) {\n  let fields = [descriptor];\n  for (let i = 0; i < indexFields.length; i++) {\n    let k = indexFields[i];\n    if (k in thing) {\n      fields.push(dynamoProperty(k as string, String(thing[k as keyof T]), shouldPadNumbersInIndexes));\n    } else {\n      break;\n    }\n  }\n  return fields.join(compositeKeySeparator);\n}\n\nexport function findIndexForQuery<ID, T, QueryNames>(\n  where: WhereClause<T, QueryNames>,\n  config: Config<ID, T, QueryNames>\n): Index<ID, T> | null {\n  if (where.index) {\n    if (config.indexesByTag[(where.index as unknown) as any]) {\n      return config.indexesByTag[(where.index as unknown) as any];\n    } else {\n      throw {\n        message: `The index \"${\n          where.index\n          }\" does not exist, the following are valid indexes: ${Object.keys(\n            config.indexesByTag\n          ).join(',')}`,\n      };\n    }\n  }\n\n  let indexes = config.indexes;\n\n  for (let i = 0; i < indexes.length; i++) {\n    let index = indexes[i];\n    let neededFields = new Set(Object.keys(where.args) as (\n      | keyof ID\n      | keyof T)[]);\n\n    //for this index to be eligible, we need every hashKey field to be provided in the query\n    let queryContainsAllHashKeyFields = index.hashKeyFields.every(k =>\n      neededFields.has(k)\n    );\n\n    //query contains all hash key fields\n    if (queryContainsAllHashKeyFields) {\n      index.hashKeyFields.forEach(k => neededFields.delete(k));\n      const sortKeyFieldIndex = neededFields.size;\n      //ensure that the first n fields of this index are included in the where clause\n      index.sortKeyFields\n        .slice(0, neededFields.size)\n        .forEach(k => neededFields.delete(k));\n\n      //all the specified fields are in the correct place for this index\n      if (neededFields.size === 0) {\n        //check if this config has a sort and if it's in the right place\n        if (where.sortBy) {\n          if (index.sortKeyFields.indexOf(where.sortBy) === sortKeyFieldIndex) {\n            return index;\n          }\n        } else {\n          return index;\n        }\n      }\n    }\n  }\n  return null;\n}\n\n//type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nfunction getKey<ID, T>(\n  id: ID | T,\n  i: Index<ID, T>,\n  separator: string,\n  shouldPadNumbersInIndexes: boolean\n): Partial<SingleTableDocument> {\n  return {\n    [i.hashKeyAttribute]: getCompositeKeyValue(\n      id as any,\n      i.hashKeyFields as (keyof ID)[],\n      i.hashKeyDescriptor,\n      separator,\n      shouldPadNumbersInIndexes\n    ),\n    [i.sortKeyAttribute]: getCompositeKeyValue(\n      id as any,\n      i.sortKeyFields as (keyof ID)[],\n      i.sortKeyDescriptor,\n      separator,\n      shouldPadNumbersInIndexes\n    ),\n  };\n}\n\ntype IndexQueryBuilderMap<ID, T, QueryNames> = Record<\n  Extract<QueryNames, string>,\n  () => QueryBuilder<ID, T, QueryNames>\n>;\n\nexport type Repository<ID = any, T = any, IndexNames = string> = {\n  config: Config<ID, T>;\n  getKey: (id: ID) => any;\n  get: (id: ID) => Promise<T | null>;\n  update: (id: ID, updates: Partial<T>) => Promise<T>;\n  overwrite: (thing: T) => Promise<T>;\n  put: (thing: T) => Promise<T>;\n  delete: (id: ID) => Promise<boolean>;\n  batchDelete: (ids: ID[]) => Promise<boolean[]>;\n  batchGet: (ids: ID[]) => Promise<(T | null)[]>;\n  formatForDDB: (thing: T) => SingleTableDocumentWithData<T>;\n  executeQuery: (\n    where: WhereClause<T, IndexNames | any>,\n    index: Index<ID, T>\n  ) => Promise<QueryResult<T>>;\n  getSortKeyAndHashKeyForQuery(where: WhereClause<T, IndexNames | any>, index: Index<ID, T>): { sortKey: string, hashKey: string }\n  getQueryArgs(where: WhereClause<T, IndexNames | any>, index: Index<ID, T>): DocumentClient.QueryInput\n  query: () => QueryBuilder<ID, T, IndexNames>\n  findIndexForQuery: (where: WhereClause<T, IndexNames | any>) => Index<ID, T> | null;\n  getDocClient: () => AWS.DynamoDB.DocumentClient\n  indexes: IndexQueryBuilderMap<ID, T, IndexNames | any>;\n  getCursor: (thing: T, index?: Index<ID, T>) => Record<string, any>\n};\n\n//const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport function getRepository<ID, T, QueryNames = string>(\n  args: ConfigArgs<ID, T, QueryNames>\n): Repository<ID, T, QueryNames> {\n  let config = getConfig(args);\n  let repo: Repository<ID, T, QueryNames> = {\n    getDocClient: getDocClient,\n    get config() {\n      return config;\n    },\n    getCursor: (thing, index) => {\n      const formatted = repo.formatForDDB(thing);\n\n      const cursor = {\n        [config.primaryIndex.hashKeyAttribute]: formatted[config.primaryIndex.hashKeyAttribute],\n        [config.primaryIndex.sortKeyAttribute]: formatted[config.primaryIndex.sortKeyAttribute],\n        ...(index && { [index.hashKeyAttribute]: formatted[index.hashKeyAttribute] }),\n        ...(index && { [index.sortKeyAttribute]: formatted[index.sortKeyAttribute] })\n      };\n\n      return cursor;\n    },\n    getKey: (id: ID) => {\n      const key = getKey(id, config.primaryIndex, config.compositeKeySeparator, config.shouldPadNumbersInIndexes);\n      return key;\n    },\n    get: async (id: ID): Promise<T | null> => {\n\n      let res = await repo.batchGet([id]);\n      return res[0];\n    },\n    batchGet: async (ids: ID[]): Promise<(T | null)[]> => {\n      let res = await getDocClient()\n        .batchGet({\n          RequestItems: {\n            [config.tableName]: {\n              Keys: ids.map(repo.getKey)\n            }\n          }\n        })\n        .promise();\n      if (res.Responses && res.Responses[config.tableName]) {\n        return res.Responses[config.tableName].map(doc => {\n          if (doc) {\n            return getDataFromDocument(doc as SingleTableDocumentWithData<T>);\n          } else {\n            return null;\n          }\n        })\n      }\n\n      return [];\n    },\n    update: async (id: ID, thing: Partial<T>): Promise<T> => {\n      let old = (await repo.get(id)) as T;\n      let updated = { ...old, ...thing };\n      return repo.overwrite(updated);\n    },\n    put: (thing: T): Promise<T> => {\n      return repo.overwrite(thing);\n    },\n    overwrite: async (thing: T): Promise<T> => {\n      await getDocClient()\n        .put({\n          TableName: config.tableName,\n          Item: repo.formatForDDB(thing),\n        })\n        .promise();\n      return thing;\n    },\n    delete: async (id: ID): Promise<boolean> => {\n      await repo.batchDelete([id]);\n      return true;\n    },\n    batchDelete: async (ids: ID[]): Promise<boolean[]> => {\n      await getDocClient()\n        .batchWrite({\n          RequestItems: {\n            [config.tableName]: ids.map(id => ({\n              DeleteRequest: {\n                Key: repo.getKey(id)\n              }\n            }))\n          }\n        })\n        .promise()\n      return ids.map(() => true);\n    },\n    getSortKeyAndHashKeyForQuery(where: WhereClause<T, QueryNames>, index: Index<ID, T>) {\n      if (index.isCustomIndex) {\n        const hashKey = where.args[index.hashKeyAttribute as any];\n        const sortKey = where.args[index.sortKeyAttribute as any];\n        return { hashKey, sortKey };\n      } else {\n        const hashKey = getCompositeKeyValue<ID, T>(\n          where.args as T,\n          index.hashKeyFields,\n          index.hashKeyDescriptor,\n          config.compositeKeySeparator,\n          config.shouldPadNumbersInIndexes\n        );\n\n\n        const sortKey =\n          index.sortKeyFields &&\n          getSortkeyForBeginsWithQuery<ID, T>(\n            where.args,\n            index.sortKeyFields,\n            index.sortKeyDescriptor,\n            config.compositeKeySeparator,\n            config.shouldPadNumbersInIndexes\n          );\n\n        return { sortKey, hashKey };\n      }\n\n    },\n    getQueryArgs(where: WhereClause<T, QueryNames>, index: Index<ID, T>): DocumentClient.QueryInput {\n      const { sortKey, hashKey } = this.getSortKeyAndHashKeyForQuery(where, index);\n      const args = {\n        TableName: config.tableName,\n        ...((index as any).indexName && {\n          IndexName: (index as any).indexName,\n        }),\n        Limit: where.limit || 5,\n        ScanIndexForward: where.sort === 'asc',\n        KeyConditionExpression: `#hKeyAttribute = :hKey ${sortKey ? 'and begins_with(#sKeyAttribute, :sKey)' : ''}`,\n        ExpressionAttributeNames: {\n          '#hKeyAttribute': index.hashKeyAttribute,\n          ...(sortKey && {\n            '#sKeyAttribute': index.sortKeyAttribute,\n          })\n        },\n        ExpressionAttributeValues: {\n          ':hKey': hashKey,\n          ...(sortKey && {\n            ':sKey': sortKey,\n          })\n        },\n        ...(where.cursor && {\n          ExclusiveStartKey: where.cursor,\n        }),\n      }\n      return args;\n    },\n    executeQuery: async (\n      where: WhereClause<T, QueryNames>,\n      index: Index<ID, T>\n    ): Promise<QueryResult<T>> => {\n      let res = await getDocClient()\n        .query(repo.getQueryArgs(where, index))\n        .promise();\n\n      let nextWhere: WhereClause<T, QueryNames> | undefined = res &&\n        res.LastEvaluatedKey && {\n        ...where,\n        cursor: (res as any).LastEvaluatedKey,\n      };\n\n      return {\n        results: (res as any).Items.map((i: SingleTableDocumentWithData<T>) => {\n          return getDataFromDocument(i);\n        }),\n        nextPageArgs: nextWhere as unknown as any,\n      };\n    },\n    query: () => {\n      return new QueryBuilder<ID, T, QueryNames>(repo);\n    },\n    formatForDDB(thing: T) {\n      let obj: Partial<SingleTableDocumentWithData<T>> = {\n        ...thing,\n        __objectType: config.objectName,\n      };\n\n      config.indexes.filter(i => !i.isCustomIndex).forEach(i => {\n        obj = {\n          ...obj,\n          ...getKey(thing, i, config.compositeKeySeparator, config.shouldPadNumbersInIndexes),\n        };\n      });\n\n      return obj as SingleTableDocumentWithData<T>;\n    },\n    findIndexForQuery: (where: WhereClause<T, QueryNames>) => {\n      return findIndexForQuery<ID, T, QueryNames>(where, config);\n    },\n    indexes: Object.keys(config.indexesByTag).reduce(\n      (obj: any, key: string) => {\n        obj[key] = () => repo.query().index(key as any);\n        return obj;\n      },\n      {}\n    ) as IndexQueryBuilderMap<ID, T, QueryNames>,\n  };\n  return repo;\n}\n","import { AWS } from './AWS';\nimport { Repository } from './getRepository';\nimport { Index } from './config';\nimport { createTable, getGSIDef } from './createTable';\n\nexport async function ensureTableAndIndexesExist(repos: Repository[]) {\n  console.log(AWS.config.region);\n  let tables: {\n    [tableName: string]: {\n      [indexName: string]: Index<any, any>;\n    };\n  } = {};\n\n  repos\n    .map(c => c.config)\n    .forEach(c => {\n      if (!tables[c.tableName]) {\n        tables[c.tableName] = {};\n      }\n      c.indexes.forEach(i => {\n        if (i.type === 'globalSecondaryIndex') {\n          tables[c.tableName][i.indexName] = i;\n        }\n      });\n    });\n\n  let tableNames = Object.keys(tables);\n\n  for (let i = 0; i < tableNames.length; i++) {\n    let tableName = tableNames[i];\n    await ensureTableIsConfigured(tableNames[i], tables[tableName]);\n  }\n}\n\nasync function getTableDescription(\n  client: AWS.DynamoDB,\n  tableName: string\n): Promise<AWS.DynamoDB.TableDescription | null> {\n  try {\n    console.log('calling for describeTable');\n    let description = await client\n      .describeTable({ TableName: tableName })\n      .promise();\n\n    if (description.Table) {\n      console.log('returning table description');\n      return description.Table;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  console.log('returning nullll');\n  return null;\n}\n\nasync function ensureTableIsConfigured(\n  tableName: string,\n  indexes: Record<string, Index<any, any>>\n) {\n  const client = new AWS.DynamoDB();\n  console.log(`checking if the table \"${tableName}\" has already been created`);\n\n  let table = await getTableDescription(client, tableName);\n  console.log('got the description', table);\n  let indexesToBeCreated = { ...indexes };\n\n  if (!table) {\n    let ins = Object.values(indexesToBeCreated);\n    console.log(`table \"${tableName}\" does not exist, creating it now`);\n    await createTable({ tableName, indexes: ins });\n    console.log(\n      `table \"${tableName}\" created with the following indexes ${Object.keys(\n        indexesToBeCreated\n      ).join(',')}`\n    );\n    return;\n  }\n\n  console.log(`table \"${tableName}\" already exists, checking the indexes`);\n\n  if (table) {\n    (table.GlobalSecondaryIndexes || []).forEach(i => {\n      delete indexesToBeCreated[i.IndexName || ''];\n    });\n  }\n  let toCreate = Object.values(indexesToBeCreated);\n  if (toCreate.length > 0) {\n    console.log(\n      `creating the following indexes ${Object.keys(indexesToBeCreated).join(\n        ','\n      )} to table ${tableName}`\n    );\n    await client\n      .updateTable({\n        TableName: tableName,\n        AttributeDefinitions: toCreate.reduce<{AttributeName: string, AttributeType: string}[]>((prev, index) => {\n          return prev.concat([{\n              AttributeName: index.sortKeyAttribute as string,\n              AttributeType: 'S',\n          },{\n            AttributeName: index.hashKeyAttribute as string,\n            AttributeType: 'S'\n          }])\n        },[]),\n        GlobalSecondaryIndexUpdates: toCreate.map(i => ({\n          Create: getGSIDef(i),\n        })),\n      })\n      .promise();\n    await client.waitFor('tableExists', {TableName: tableName});\n  } else {\n    console.log(`the table ${tableName} has all the necessary indexes`);\n  }\n}\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","Symbol","iterator","asyncIterator","_docClient","AWS","DynamoDB","DocumentClient","getDocClient","getDataFromDocument","doc","res","Object","keys","forEach","key","startsWith","getLSIName","which","getLSISortKeyAttribute","getGSIAttributeName","type","defaultTableName","getDefaultTableName","getGSIDef","index","IndexName","indexName","KeySchema","AttributeName","hashKeyAttribute","KeyType","sortKeyAttribute","Projection","ProjectionType","message","getPrimaryIndex","config","tag","isCustomIndex","hashKeyFields","hashKeyDescriptor","objectName","sortKeyFields","sortKeyDescriptor","QueryBuilder","repo","clause","args","where","parts","sortBy","sortDirection","direction","sort","cursor","limit","setClause","get","findIndexForQuery","executeQuery","getOne","results","length","getAll","_this4","nextPageArgs","next","concat","deleteAll","hasMore","_this6","batchDelete","getCompositeKeyValue","thing","properties","descriptor","separator","shouldPadNumbersInIndexes","map","k","dynamoProperty","join","stringified","String","split","after","padStart","padEnd","padDecimalNumber","getKey","id","i","ops","docClientOptions","repos","console","log","region","tables","c","tableName","indexes","tableNames","array","check","_cycle","client","recover","describeTable","TableName","promise","description","Table","getTableDescription","table","GlobalSecondaryIndexes","indexesToBeCreated","toCreate","values","updateTable","AttributeDefinitions","reduce","prev","AttributeType","GlobalSecondaryIndexUpdates","Create","waitFor","ins","localSecondaryIndexes","start","end","nums","push","range","sortKeyAttributeName","globalSecondaryIndexes","createTableInput","LocalSecondaryIndexes","BillingMode","createTable","ensureTableIsConfigured","argsIn","assign","paddedNumberLength","queries","queryName","isPrimary","isLSIQueryArg","getLSIIndex","isGSIQueryArg","getGSIIndex","hashKeyAttributeName","isCustomGSIQueryArg","getCustomGSIIndex","convertQueryArgToIndex","indexesByTag","compositeKeySeparator","primaryIndex","getConfig","getCursor","formatted","formatForDDB","batchGet","ids","RequestItems","Keys","Responses","old","updated","overwrite","put","Item","batchWrite","DeleteRequest","Key","getSortKeyAndHashKeyForQuery","hashKey","sortKey","indexFields","fields","getSortkeyForBeginsWithQuery","getQueryArgs","Limit","ScanIndexForward","KeyConditionExpression","ExpressionAttributeNames","ExpressionAttributeValues","ExclusiveStartKey","query","nextWhere","LastEvaluatedKey","Items","obj","__objectType","filter","neededFields","Set","every","has","sortKeyFieldIndex","size","slice","indexOf","newName"],"mappings":"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"}