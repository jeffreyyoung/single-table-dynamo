{"version":3,"file":"single-table-dynamo.cjs.production.min.js","sources":["../src/AWS.ts","../src/utils.ts","../src/createTable.ts","../src/config.ts","../src/getRepository.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/ensureTableAndIndexesAreCreated.ts"],"sourcesContent":["import AWS from 'aws-sdk';\nimport { ConfigurationOptions } from 'aws-sdk/lib/config';\n\nlet _docClient = new AWS.DynamoDB.DocumentClient();\n\nfunction getDocClient() {\n    return _docClient;\n}\n\nexport {AWS, getDocClient};\n\nexport function WORKAROUND_updateAWSConfig(ops: ConfigurationOptions) {\n    AWS.config.update(ops);\n    _docClient = new AWS.DynamoDB.DocumentClient(ops);\n};\n  ","import { SingleTableDocument } from './SingleTableDocument';\n\nexport type KeyOfStr<T> = Extract<keyof T, string>\n/**\n * \n * Each Local Secondary Index is named lsi1, lsi2, ... or lsi3\n * This function should be used when executing a query with a LSI\n * \n * @param i \n */\nexport function getLSIName<T>(which: number): KeyOfStr<SingleTableDocument<T>> {\n    return `lsi${which}` as any;\n}\n\nexport function getLSISortKeyAttribute<T>(which: number): KeyOfStr<SingleTableDocument<T>> {\n    return `lsi${which}` as any;\n}\n\nexport function getGSIName<T>(which: number): KeyOfStr<SingleTableDocument<T>> {\n    return `gsi${which}` as any;\n}\n\nexport function getGSIAttributeName<T>(which: number, type: 'Sort' | 'Hash'): KeyOfStr<SingleTableDocument<T>> {\n    return `gsi${type}${which}` as any;\n}","import { getLSIName, getLSISortKeyAttribute } from \"./utils\"\nimport {AWS} from './AWS';\nexport type CreateTableArgs = {\n    tableName?: string\n}\nimport { CreateTableInput, LocalSecondaryIndex } from \"aws-sdk/clients/dynamodb\";\nimport { Index } from './config';\n\n\nlet defaultTableName = 'SingleTable';\n\nexport function getDefaultTableName() {\n    return defaultTableName;\n}\n\nexport function setDefaultTableName(newName: string) {\n    defaultTableName = newName;\n}\n\n\nfunction range(start: number, end: number) {\n    let nums = [];\n    for (let i = start; i <= end; i++) {\n        nums.push(i);\n    }\n    return nums;\n}\n\ntype LSI = {\n    indexName: string\n    sortKeyAttributeName: string\n}\n\nexport function getGSIDef(index: Index<any, any>) {\n    if (index.type === 'globalSecondaryIndex') {\n        return {\n            IndexName: index.indexName,\n            KeySchema: [\n                {AttributeName: index.hashKeyAttribute, KeyType: 'HASH'},\n                {AttributeName: index.sortKeyAttribute, KeyType: 'RANGE'}\n            ],\n            Projection: {\n                ProjectionType: 'INCLUDE',\n                NonKeyAttributes: ['data', 'objectType']\n            }\n        } \n    }\n\n    throw `given index of type ${index.type}, expecting globalSecondaryIndex`;\n}\n\n// type GSI = {\n//     indexName: string\n//     sortKeyAttributeName: string\n//     hashKeyAttributeName: string\n// }\n/**\n * \n * Creates a table with 5 local secondary indexes\n * \n */\nexport function createTable(args: {tableName: string, indexes?: Index<any, any>[]}) {\n    var client = new AWS.DynamoDB();\n\n    let localSecondaryIndexes = range(0,4).map<LSI>(i => ({\n        indexName: getLSIName(i),\n        sortKeyAttributeName: getLSISortKeyAttribute(i)\n    }));\n\n    let globalSecondaryIndexes = (args.indexes || []).map((i) => getGSIDef(i));\n\n    let createTableInput: CreateTableInput = {\n        TableName: args.tableName || getDefaultTableName(),\n        KeySchema: [\n            {AttributeName: \"hashKey\", KeyType: \"HASH\"},\n            {AttributeName: \"sortKey\", KeyType: \"RANGE\"},\n        ],\n        AttributeDefinitions: [\n            {AttributeName: \"hashKey\", AttributeType: \"S\"},\n            {AttributeName: \"sortKey\", AttributeType: \"S\"},\n            ...localSecondaryIndexes.map(i => {\n                return {AttributeName: i.sortKeyAttributeName, AttributeType: \"S\"}\n            }),\n            ...(args.indexes as Index<any, any>[]).map(i => ({\n                AttributeName: i.sortKeyAttribute, AttributeType: \"S\"\n            })),\n            ...(args.indexes as Index<any, any>[]).map(i => ({\n                AttributeName: i.hashKeyAttribute, AttributeType: \"S\"\n            }))\n        ],\n        LocalSecondaryIndexes: [\n            ...localSecondaryIndexes.map<LocalSecondaryIndex>(i => ({\n                IndexName: i.indexName,\n                KeySchema: [\n                    {AttributeName: 'hashKey', KeyType: 'HASH'},\n                    {AttributeName: i.sortKeyAttributeName, KeyType: 'RANGE'}\n                    \n                ],\n                Projection: {\n                    ProjectionType: 'INCLUDE',\n                    NonKeyAttributes: ['data', 'objectType']\n                }\n            }))\n        ],\n        GlobalSecondaryIndexes: globalSecondaryIndexes,\n        BillingMode: 'PAY_PER_REQUEST'\n    }\n\n    return client.createTable(createTableInput).promise();\n}","import { SingleTableDocument } from \"./SingleTableDocument\"\nimport { KeyOfStr, getLSISortKeyAttribute, getGSIAttributeName, getGSIName, getLSIName } from \"./utils\"\nimport { getDefaultTableName } from \"./createTable\";\n\nexport type PropList<T> = KeyOfStr<T>[];\nexport type PropList2<A,B> = (KeyOfStr<A> | KeyOfStr<B>)[]\ntype BaseIndex<ID, T> = {\n    hashKeyFields: PropList2<ID, T>\n    hashKeyDescriptor: string\n    hashKeyAttribute: keyof SingleTableDocument<T>\n\n    sortKeyFields: PropList2<ID, T>\n    sortKeyDescriptor: string\n    sortKeyAttribute: keyof SingleTableDocument<T>\n\n    tag?: string \n}\nexport type Index<ID, T> = ({type: 'primaryIndex'} | {\n    type: 'localSecondaryIndex' | 'globalSecondaryIndex'\n    indexName: string\n}) & BaseIndex<ID, T>;\n\nexport function getPrimaryIndex<ID, T>(config: ConfigArgs<ID, T>, tag: string = ''): Index<ID, T> {\n    return {\n        hashKeyFields: config.hashKeyFields,\n        hashKeyDescriptor: config.objectName,\n        hashKeyAttribute: 'hashKey',\n\n        sortKeyFields: config.sortKeyFields || [],\n        sortKeyDescriptor: config.objectName,\n        sortKeyAttribute: 'sortKey',\n        \n        type: 'primaryIndex',\n\n        tag\n    }\n}\n\nfunction isPrimaryQueryArg(thing: any): thing is PrimaryQueryArg {\n    return thing && thing.isPrimary;\n}\n\nfunction isLSIQueryArg<T>(thing: any): thing is LSIQueryArg<T> {\n    return thing && thing.sortKeyFields && !thing.hashKeyFields;\n}\n\nfunction isGSIQueryArg<T>(thing: any): thing is GSIQueryArg<T> {\n    return thing && thing.sortKeyFields && thing.hashKeyFields;\n}\n\nexport function convertQueryArgToIndex<ID,T>(queryName: string, config: ConfigArgs<ID,T>):Index<ID,T> {\n    \n    let index = (config.queries || {})[queryName];\n    if (isPrimaryQueryArg(index)) {\n        return getPrimaryIndex(config, queryName);\n    } else if (isLSIQueryArg(index)) {\n        return getLSIIndex<ID, T>(queryName, index, config);\n    } else if (isGSIQueryArg(index)) {\n        return getGSIIndex<ID,T>(queryName, index, config);\n    } else {\n        throw `${queryName} is not valid`\n    }\n}\nexport function getLSIIndex<ID,T>(queryName: string, i: LSIQueryArg<T>, config: ConfigArgs<ID, T>): Index<ID, T> {\n    return {\n        hashKeyFields: config.hashKeyFields,\n        hashKeyDescriptor: config.objectName,\n        hashKeyAttribute: 'hashKey',\n\n        sortKeyFields: i.sortKeyFields,\n        sortKeyDescriptor: queryName,\n        sortKeyAttribute: getLSISortKeyAttribute<T>(i.which) as keyof SingleTableDocument<T>,\n\n        indexName: getLSIName(i.which),\n\n        type: 'localSecondaryIndex',\n\n        tag: queryName\n    }\n}\n\nexport function getGSIIndex<ID,T>(queryName: string, i: GSIQueryArg<T>, config: ConfigArgs<ID,T>): Index<ID, T> {\n    return {\n        hashKeyFields: i.hashKeyFields,\n        hashKeyDescriptor: config.objectName+'-'+queryName,\n        hashKeyAttribute: getGSIAttributeName(i.which, 'Hash') as keyof SingleTableDocument<T>,\n\n        sortKeyFields: i.sortKeyFields,\n        sortKeyDescriptor: queryName,\n        sortKeyAttribute: getGSIAttributeName(i.which, 'Sort') as keyof SingleTableDocument<T>,\n\n        indexName: getGSIName(i.which),\n\n        type: 'globalSecondaryIndex',\n\n        tag: queryName\n    }\n}\n\ntype PrimaryQueryArg = {\n    isPrimary: true\n}\n\ntype LSIQueryArg<T> = {\n    sortKeyFields: PropList<T>,\n    type?: 'localSecondaryIndex'\n    which: 0 | 1 | 2 | 3 | 4\n}\n\ntype GSIQueryArg<T> = {\n    sortKeyFields: PropList<T>,\n    hashKeyFields: PropList<T>,\n    type?: 'globalSeconaryIndex'\n    which: 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19\n}\n\nexport type ConfigArgs<ID, T, QueryNames = string> = {\n    tableName?: string,\n    objectName: string,\n    hashKeyFields: PropList<ID>,\n    sortKeyFields?: PropList<ID>,\n    compositeKeySeparator?: '#',\n    queries?: Record<Extract<QueryNames, string>,   GSIQueryArg<T> | LSIQueryArg<T> | PrimaryQueryArg>\n}\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\n\nexport function getConfig<ID, T>(argsIn: PartialBy<ConfigArgs<ID, T>, 'queries'>): Config<ID, T> {\n    const args: ConfigArgs<ID,T> = Object.assign({queries: {}}, argsIn);\n    let indexes = [\n        getPrimaryIndex(args),\n        ...(args.queries ? Object.keys(args.queries).map(queryName => convertQueryArgToIndex(queryName, args)) : [])\n    ];\n\n    let indexesByTag = indexes.reduce((prev, index) => {\n        return {\n            ...prev,\n            [index.tag as string]: index\n        }\n    }, {});\n\n    return Object.assign({\n        tableName: args.tableName || getDefaultTableName(),\n        compositeKeySeparator: args.compositeKeySeparator || '#'\n        \n    },{\n        objectName: args.objectName,\n        primaryIndex: indexes[0],\n        indexes,\n        indexesByTag\n    })\n}\n\nexport type Config<ID, T, QueryNames = string> = Readonly<{\n    tableName: string,\n    objectName: string,\n    primaryIndex: Index<ID, T>,\n    indexes: Index<ID, T>[],\n    indexesByTag: Record<Extract<QueryNames, string>, Index<ID, T>>,\n    compositeKeySeparator: string,\n}>\n","import {getDocClient} from './AWS';\nimport { SingleTableDocument } from './SingleTableDocument';\nimport { ConfigArgs, Index, Config, getConfig } from './config';\nimport {KeyOfStr} from './utils';\n\nexport type WhereClause<T = any, QueryNames = string> = {\n    sort?: 'asc' | 'desc',\n    args: Partial<T>,\n    index?: QueryNames,\n    sortBy?: KeyOfStr<T>,\n    cursor?: Record<string, any>,\n    limit?: number\n}\n\nexport type QueryResult<T> = {\n    results: T[],\n    nextPageArgs?: WhereClause<T>\n}\n\n\n/**\n * \n * @param thing \n * @param properties \n * @param descriptor \n * @param separator \n * \n * return \"{descriptor}#{properties[0]}-{thing[properties[0]]}#...\"\n */\nexport function getCompositeKeyValue<ID, T>(thing: T, properties: (keyof T | keyof ID)[], descriptor: string, separator: string) {\n    return [\n        descriptor,\n        ...properties.map(k => dynamoProperty(k as string, thing[k as keyof T] as unknown as string))\n    ].join(separator)\n}\n\n/**\n * \n * To make generic dynamo fields more readable, they are saved in the following format\n * <fieldName>-<fieldValue>, eg userId-2039848932\n * \n * This function should be used whenever saving attributes to a composite index\n * \n * @param key \n * @param value \n */\nexport function dynamoProperty(key: string, value: string) {\n    return `${key}-${value}`;\n}\n\nexport function getSortkeyForBeginsWithQuery<ID, T>(thing: Partial<T>, indexFields: (keyof T | keyof ID)[], descriptor: string, compositeKeySeparator: string) {\n    let fields = [descriptor];\n    for (let i = 0; i < indexFields.length; i++) {\n        let k = indexFields[i];\n        if (k in thing) {\n            fields.push(dynamoProperty(k as string, String(thing[k as keyof T])));\n        } else {\n            break;\n        }\n    }\n    return fields.join(compositeKeySeparator);\n}\n\n\nexport function findIndexForQuery<ID, T, QueryNames>(where: WhereClause<T>, config: Config<ID, T, QueryNames>): Index<ID, T> | null {\n    if (where.index) {\n        if (config.indexesByTag[where.index as unknown as any]) {\n            return config.indexesByTag[where.index as unknown as any];\n        } else {\n            throw `The index \"${where.index}\" does not exist, the following are valid indexes: ${Object.keys(config.indexesByTag).join(',')}`\n        }\n    }\n\n    let indexes = config.indexes;\n\n    for (let i = 0; i < indexes.length; i++) {\n        let index = indexes[i];\n        let neededFields = new Set(Object.keys(where.args) as (keyof ID | keyof T)[]);\n\n        //for this index to be eligible, we need every hashKey field to be provided in the query\n        let queryContainsAllHashKeyFields = index.hashKeyFields.every(k => neededFields.has(k));\n\n        //query contains all hash key fields\n        if (queryContainsAllHashKeyFields) {\n            index.hashKeyFields.forEach(k => neededFields.delete(k));\n            const sortKeyFieldIndex = neededFields.size;\n            //ensure that the first n fields of this index are included in the where clause\n            index.sortKeyFields.slice(0, neededFields.size).forEach(k => neededFields.delete(k));\n\n            //all the specified fields are in the correct place for this index\n            if (neededFields.size === 0) {\n\n                //check if this config has a sort and if it's in the right place\n                if (where.sortBy) {\n                    if (index.sortKeyFields.indexOf(where.sortBy) === sortKeyFieldIndex) {\n                        return index;\n                    }\n                } else {\n                    return index;\n                }\n            }\n        }\n    }\n    return null;\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\n\nfunction getKey<ID, T>(id: ID | T, i: Index<ID, T>, separator: string): Partial<Omit<SingleTableDocument<T>, 'data'>> {\n    return {\n        [i.hashKeyAttribute]: getCompositeKeyValue(id as any, i.hashKeyFields as (keyof ID)[], i.hashKeyDescriptor, separator),\n        [i.sortKeyAttribute]: getCompositeKeyValue(id as any, i.sortKeyFields as (keyof ID)[], i.sortKeyDescriptor, separator)\n    }\n}\n\ntype Queries<T, QueryNames> = Record<Extract<QueryNames, string>, (where: WhereClause<T>) => Promise<QueryResult<T>>>\n\nexport type Repository<ID = any, T = any, QueryNames = string> = {\n    config: Config<ID, T>,\n    getKey: (id: ID) => any,\n    get: (id: ID) => Promise<T|null>,\n    update: (id: ID, updates: Partial<T>) => Promise<T>,\n    overwrite: (thing: T) => Promise<T>,\n    put: (thing: T) => Promise<T>,\n    delete: (id: ID) => Promise<boolean>,\n    formatForDDB: (thing: T) => SingleTableDocument<T>,\n    executeQuery: (where: WhereClause<T>, index: Index<ID, T>) => Promise<QueryResult<T>>,\n    query: (where: WhereClause<T>) => Promise<QueryResult<T>>,\n    queryOne: (where: WhereClause<T>) => Promise<T | null>,\n    findIndexForQuery: (where: WhereClause<T>) => Index<ID,T> | null\n    queries: Queries<T, QueryNames>\n}\n\n//const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport function getRepository<ID, T, QueryNames = string>(args: ConfigArgs<ID, T, QueryNames>): Repository<ID, T, QueryNames> {\n    let config = getConfig(args);\n    let repo: Repository<ID, T, QueryNames> = {\n        get config() {return config;},\n        getKey: (id: ID) => {\n            return getKey(id, config.primaryIndex, config.compositeKeySeparator);\n        },\n        get: async (id: ID): Promise<T | null> => {\n            let res = await getDocClient().get({\n                TableName: config.tableName,\n                Key: repo.getKey(id)\n            }).promise();\n            if (!res.Item) {\n                return null;\n            }\n            return (res.Item as any).data;\n        },\n        update: async (id: ID, thing: Partial<T>): Promise<T> => {\n            let old = await repo.get(id) as T;\n            let updated = { ...old, ...thing };\n            return repo.overwrite(updated);\n        },\n        put: (thing: T): Promise<T> => {\n            return repo.overwrite(thing);\n        },\n        overwrite: async (thing: T): Promise<T> => {\n            await getDocClient().put({\n                TableName: config.tableName,\n                Item: repo.formatForDDB(thing)\n            }).promise();\n            return thing;\n        },\n        delete: async (id: ID): Promise<boolean> => {\n            await getDocClient().delete({\n                TableName: config.tableName,\n                Key: repo.getKey(id)\n            }).promise();\n\n            return true;\n        },\n        executeQuery: async (where: WhereClause<T>, index: Index<ID, T>): Promise<QueryResult<T>> => {\n            const hashKey = getCompositeKeyValue<ID, T>(where.args as T, index.hashKeyFields, index.hashKeyDescriptor, config.compositeKeySeparator);\n            const sortKey = index.sortKeyFields && getSortkeyForBeginsWithQuery<ID, T>(where.args, index.sortKeyFields, index.sortKeyDescriptor, config.compositeKeySeparator);\n            \n            let res = await getDocClient().query({\n                TableName: config.tableName,\n                ...((index as any).indexName && { IndexName: (index as any).indexName }),\n                Limit: where.limit || 5,\n                KeyConditionExpression: `${index.hashKeyAttribute} = :hKey and begins_with(${index.sortKeyAttribute}, :sKey) `,\n                ExpressionAttributeValues: {\n                    ':hKey': hashKey,\n                    ':sKey': sortKey\n                },\n                ...(where.cursor && {\n                    ExclusiveStartKey: where.cursor\n                })\n            }).promise();\n\n            let nextWhere: WhereClause<T> | undefined = res && res.LastEvaluatedKey && { ...where, cursor: (res as any).LastEvaluatedKey };\n            \n            return {\n                results: (res as any).Items.map((i: SingleTableDocument<T>) => {\n                    return i.data;\n                }),\n                nextPageArgs: nextWhere\n            };\n        },\n        query: async (where: WhereClause<T>): Promise<QueryResult<T>> => {\n            let index = findIndexForQuery<ID, T, QueryNames>(where, config);\n\n            if (!index) {\n                throw 'there isnt an index configured for this query';\n            }\n\n            return repo.executeQuery(where, index);\n        },\n        queryOne: async (argsIn: WhereClause<T>): Promise<T | null> => {\n            const args = {...argsIn, limit: 1};\n            const res = await repo.query(args);\n            if (res.results.length > 0) {\n                return res.results[0];\n            } else {\n                return null;\n            }\n        },\n        formatForDDB(thing: T) {\n            let obj: Partial<SingleTableDocument<T>> = {\n                data: thing,\n                objectType: config.objectName\n            }\n\n            config.indexes.forEach(i => {\n                obj = {\n                    ...obj,\n                    ...getKey(thing, i, config.compositeKeySeparator)\n                }\n            });\n\n            return obj as SingleTableDocument<T>;\n        },\n        findIndexForQuery: (where: WhereClause<T>) => {\n            return findIndexForQuery<ID, T, QueryNames>(where, config);\n        },\n        queries: Object.keys(config.indexesByTag).reduce((obj: any, key: string) => {\n            obj[key] = (where: WhereClause<T>) => repo.executeQuery(where, config.indexesByTag[key]);\n            return obj;\n        }, {}) as Queries<T, QueryNames>\n    }\n    return repo;\n}\n\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import {AWS} from './AWS';\nimport {Repository} from './getRepository';\nimport { Index } from './config';\nimport { createTable, getGSIDef } from './createTable';\n\n\nexport async function ensureTableAndIndexesExist(repos: Repository[]) {\n    console.log(AWS.config.region);\n    let tables: {\n        [tableName: string]: {\n            [indexName: string]: Index<any, any>\n        }\n    } = {};\n    \n    repos.map(c => c.config).forEach(c => {\n        if (!tables[c.tableName]) {\n            tables[c.tableName] = {};\n        }\n        c.indexes.forEach(i => {\n            if (i.type === 'globalSecondaryIndex') {\n                tables[c.tableName][i.indexName] = i;\n            }\n        });\n    });\n\n    let tableNames = Object.keys(tables);\n\n    for (let i = 0; i < tableNames.length; i++) {\n        let tableName = tableNames[i];\n        await ensureTableIsConfigured(tableNames[i], tables[tableName]);\n    }\n}\n\nasync function getTableDescription(client: AWS.DynamoDB, tableName: string): Promise<AWS.DynamoDB.TableDescription | null> {\n    try {\n        let description = await client.describeTable({TableName: tableName}).promise();\n        \n        if (description.Table) {\n            console.log('returning table description!!!!');\n            return description.Table;\n        }\n    } catch (e) {\n        console.log(e);\n    }\n\n    console.log('returning nullll');\n    return null;\n}\n\nasync function ensureTableIsConfigured(tableName: string, indexes: Record<string, Index<any,any>>) {\n    const client = new AWS.DynamoDB();\n    console.log(`checking if the table \"${tableName}\" has already been created`);\n    \n    let table = await getTableDescription(client, tableName);\n    let indexesToBeCreated = {...indexes};\n\n    if (!table) {\n        let ins = Object.values(indexesToBeCreated)\n        console.log(`table \"${tableName}\" does not exist, creating it now`);\n        await createTable({tableName, indexes: ins});\n        console.log(`table \"${tableName}\" created with the following indexes ${Object.keys(indexesToBeCreated).join(',')}`);\n        return;\n    }\n    \n    console.log(`table \"${tableName}\" already exists, checking the indexes`);\n\n    if (table) {\n        (table.GlobalSecondaryIndexes || []).forEach(i => {\n            delete indexesToBeCreated[i.IndexName || '']\n        });\n    }\n    let toCreate = Object.values(indexesToBeCreated);\n    if (toCreate.length > 0) {\n        console.log(`creating the following indexes ${Object.keys(indexesToBeCreated).join(',')} to table ${tableName}`)\n        await client.updateTable({\n            TableName: tableName,\n            GlobalSecondaryIndexUpdates: toCreate.map(i => ({\n                Create: getGSIDef(i)\n            }))\n        }).promise();\n\n    } else {\n        console.log(`the table ${tableName} has all the necessary indexes`);\n    }\n\n\n}"],"names":["_docClient","AWS","DynamoDB","DocumentClient","getDocClient","getLSIName","which","getLSISortKeyAttribute","getGSIAttributeName","type","defaultTableName","getDefaultTableName","getGSIDef","index","IndexName","indexName","KeySchema","AttributeName","hashKeyAttribute","KeyType","sortKeyAttribute","Projection","ProjectionType","NonKeyAttributes","getPrimaryIndex","config","tag","hashKeyFields","hashKeyDescriptor","objectName","sortKeyFields","sortKeyDescriptor","getCompositeKeyValue","thing","properties","descriptor","separator","map","k","dynamoProperty","join","key","value","findIndexForQuery","where","indexesByTag","Object","keys","indexes","i","neededFields","Set","args","every","has","forEach","sortKeyFieldIndex","size","slice","sortBy","indexOf","length","getKey","id","_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","pact","bind","observer","Symbol","iterator","asyncIterator","ops","update","repos","console","log","region","tables","c","tableName","tableNames","array","body","check","reject","_cycle","thenable","client","recover","describeTable","TableName","promise","description","Table","getTableDescription","table","GlobalSecondaryIndexes","indexesToBeCreated","toCreate","values","updateTable","GlobalSecondaryIndexUpdates","Create","ins","localSecondaryIndexes","start","end","nums","push","range","sortKeyAttributeName","globalSecondaryIndexes","createTableInput","AttributeDefinitions","AttributeType","LocalSecondaryIndexes","BillingMode","createTable","ensureTableIsConfigured","argsIn","assign","queries","queryName","isPrimary","isLSIQueryArg","getLSIIndex","isGSIQueryArg","getGSIIndex","convertQueryArgToIndex","reduce","prev","compositeKeySeparator","primaryIndex","getConfig","repo","get","Key","res","Item","data","old","updated","overwrite","put","formatForDDB","executeQuery","hashKey","sortKey","indexFields","fields","String","getSortkeyForBeginsWithQuery","query","Limit","limit","KeyConditionExpression","ExpressionAttributeValues","cursor","ExclusiveStartKey","nextWhere","LastEvaluatedKey","results","Items","nextPageArgs","queryOne","obj","objectType","newName"],"mappings":"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"}