{"version":3,"file":"single-table-dynamo.cjs.production.min.js","sources":["../src/AWS.ts","../src/utils.ts","../src/createTable.ts","../src/config.ts","../src/getRepository.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/ensureTableAndIndexesAreCreated.ts"],"sourcesContent":["import AWS from 'aws-sdk';\nimport { ConfigurationOptions } from 'aws-sdk/lib/config';\n\nlet _docClient = new AWS.DynamoDB.DocumentClient();\n\nfunction getDocClient() {\n  return _docClient;\n}\n\nexport { AWS, getDocClient };\n\nexport function WORKAROUND_updateAWSConfig(ops: ConfigurationOptions) {\n  AWS.config.update(ops);\n  _docClient = new AWS.DynamoDB.DocumentClient(ops);\n}\n","import { SingleTableDocument } from './SingleTableDocument';\n\nexport type KeyOfStr<T> = Extract<keyof T, string>;\n/**\n *\n * Each Local Secondary Index is named lsi1, lsi2, ... or lsi3\n * This function should be used when executing a query with a LSI\n *\n * @param i\n */\nexport function getLSIName<T>(which: number): KeyOfStr<SingleTableDocument<T>> {\n  return `lsi${which}` as any;\n}\n\nexport function getLSISortKeyAttribute<T>(\n  which: number\n): KeyOfStr<SingleTableDocument<T>> {\n  return `lsi${which}` as any;\n}\n\nexport function getGSIName<T>(which: number): KeyOfStr<SingleTableDocument<T>> {\n  return `gsi${which}` as any;\n}\n\nexport function getGSIAttributeName<T>(\n  which: number,\n  type: 'Sort' | 'Hash'\n): KeyOfStr<SingleTableDocument<T>> {\n  return `gsi${type}${which}` as any;\n}\n","import { getLSIName, getLSISortKeyAttribute } from './utils';\nimport { AWS } from './AWS';\nimport {\n  CreateTableInput,\n  LocalSecondaryIndex,\n} from 'aws-sdk/clients/dynamodb';\nimport { Index } from './config';\nexport type CreateTableArgs = {\n  tableName?: string;\n};\n\nlet defaultTableName = 'SingleTable';\n\nexport function getDefaultTableName() {\n  return defaultTableName;\n}\n\nexport function setDefaultTableName(newName: string) {\n  defaultTableName = newName;\n}\n\nfunction range(start: number, end: number) {\n  let nums = [];\n  for (let i = start; i <= end; i++) {\n    nums.push(i);\n  }\n  return nums;\n}\n\ntype LSI = {\n  indexName: string;\n  sortKeyAttributeName: string;\n};\n\nexport function getGSIDef(index: Index<any, any>) {\n  if (index.type === 'globalSecondaryIndex') {\n    return {\n      IndexName: index.indexName,\n      KeySchema: [\n        { AttributeName: index.hashKeyAttribute, KeyType: 'HASH' },\n        { AttributeName: index.sortKeyAttribute, KeyType: 'RANGE' },\n      ],\n      Projection: {\n        ProjectionType: 'INCLUDE',\n        NonKeyAttributes: ['data', 'objectType'],\n      },\n    };\n  }\n\n  throw {\n    message: `given index of type ${index.type}, expecting globalSecondaryIndex`,\n  };\n}\n\n// type GSI = {\n//     indexName: string\n//     sortKeyAttributeName: string\n//     hashKeyAttributeName: string\n// }\n/**\n *\n * Creates a table with 5 local secondary indexes\n *\n */\nexport function createTable(args: {\n  tableName: string;\n  indexes?: Index<any, any>[];\n}) {\n  var client = new AWS.DynamoDB();\n\n  let localSecondaryIndexes = range(0, 4).map<LSI>(i => ({\n    indexName: getLSIName(i),\n    sortKeyAttributeName: getLSISortKeyAttribute(i),\n  }));\n\n  let globalSecondaryIndexes = (args.indexes || []).map(i => getGSIDef(i));\n\n  let createTableInput: CreateTableInput = {\n    TableName: args.tableName || getDefaultTableName(),\n    KeySchema: [\n      { AttributeName: 'hashKey', KeyType: 'HASH' },\n      { AttributeName: 'sortKey', KeyType: 'RANGE' },\n    ],\n    AttributeDefinitions: [\n      { AttributeName: 'hashKey', AttributeType: 'S' },\n      { AttributeName: 'sortKey', AttributeType: 'S' },\n      ...localSecondaryIndexes.map(i => {\n        return { AttributeName: i.sortKeyAttributeName, AttributeType: 'S' };\n      }),\n      ...(args.indexes as Index<any, any>[]).map(i => ({\n        AttributeName: i.sortKeyAttribute,\n        AttributeType: 'S',\n      })),\n      ...(args.indexes as Index<any, any>[]).map(i => ({\n        AttributeName: i.hashKeyAttribute,\n        AttributeType: 'S',\n      })),\n    ],\n    LocalSecondaryIndexes: [\n      ...localSecondaryIndexes.map<LocalSecondaryIndex>(i => ({\n        IndexName: i.indexName,\n        KeySchema: [\n          { AttributeName: 'hashKey', KeyType: 'HASH' },\n          { AttributeName: i.sortKeyAttributeName, KeyType: 'RANGE' },\n        ],\n        Projection: {\n          ProjectionType: 'INCLUDE',\n          NonKeyAttributes: ['data', 'objectType'],\n        },\n      })),\n    ],\n    GlobalSecondaryIndexes: globalSecondaryIndexes,\n    BillingMode: 'PAY_PER_REQUEST',\n  };\n\n  return client.createTable(createTableInput).promise();\n}\n","import { SingleTableDocument } from './SingleTableDocument';\nimport {\n  KeyOfStr,\n  getLSISortKeyAttribute,\n  getGSIAttributeName,\n  getGSIName,\n  getLSIName,\n} from './utils';\nimport { getDefaultTableName } from './createTable';\n\nexport type PropList<T> = KeyOfStr<T>[];\nexport type PropList2<A, B> = (KeyOfStr<A> | KeyOfStr<B>)[];\ntype BaseIndex<ID, T> = {\n  hashKeyFields: PropList2<ID, T>;\n  hashKeyDescriptor: string;\n  hashKeyAttribute: keyof SingleTableDocument<T>;\n\n  sortKeyFields: PropList2<ID, T>;\n  sortKeyDescriptor: string;\n  sortKeyAttribute: keyof SingleTableDocument<T>;\n\n  tag?: string;\n};\nexport type Index<ID, T> = (\n  | { type: 'primaryIndex' }\n  | {\n      type: 'localSecondaryIndex' | 'globalSecondaryIndex';\n      indexName: string;\n    }) &\n  BaseIndex<ID, T>;\n\nexport function getPrimaryIndex<ID, T>(\n  config: ConfigArgs<ID, T>,\n  tag: string = ''\n): Index<ID, T> {\n  return {\n    hashKeyFields: config.hashKeyFields,\n    hashKeyDescriptor: config.objectName,\n    hashKeyAttribute: 'hashKey',\n\n    sortKeyFields: config.sortKeyFields || [],\n    sortKeyDescriptor: config.objectName,\n    sortKeyAttribute: 'sortKey',\n\n    type: 'primaryIndex',\n\n    tag,\n  };\n}\n\nfunction isPrimaryQueryArg(thing: any): thing is PrimaryQueryArg {\n  return thing && thing.isPrimary;\n}\n\nfunction isLSIQueryArg<T>(thing: any): thing is LSIQueryArg<T> {\n  return thing && thing.sortKeyFields && !thing.hashKeyFields;\n}\n\nfunction isGSIQueryArg<T>(thing: any): thing is GSIQueryArg<T> {\n  return thing && thing.sortKeyFields && thing.hashKeyFields;\n}\n\nexport function convertQueryArgToIndex<ID, T>(\n  queryName: string,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  let index = (config.queries || {})[queryName];\n  if (isPrimaryQueryArg(index)) {\n    return getPrimaryIndex(config, queryName);\n  } else if (isLSIQueryArg(index)) {\n    return getLSIIndex<ID, T>(queryName, index, config);\n  } else if (isGSIQueryArg(index)) {\n    return getGSIIndex<ID, T>(queryName, index, config);\n  } else {\n    throw { message: `${queryName} is not valid` };\n  }\n}\nexport function getLSIIndex<ID, T>(\n  queryName: string,\n  i: LSIQueryArg<T>,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  return {\n    hashKeyFields: config.hashKeyFields,\n    hashKeyDescriptor: config.objectName,\n    hashKeyAttribute: 'hashKey',\n\n    sortKeyFields: i.sortKeyFields,\n    sortKeyDescriptor: queryName,\n    sortKeyAttribute: getLSISortKeyAttribute<T>(\n      i.which\n    ) as keyof SingleTableDocument<T>,\n\n    indexName: getLSIName(i.which),\n\n    type: 'localSecondaryIndex',\n\n    tag: queryName,\n  };\n}\n\nexport function getGSIIndex<ID, T>(\n  queryName: string,\n  i: GSIQueryArg<T>,\n  config: ConfigArgs<ID, T>\n): Index<ID, T> {\n  return {\n    hashKeyFields: i.hashKeyFields,\n    hashKeyDescriptor: config.objectName + '-' + queryName,\n    hashKeyAttribute: getGSIAttributeName(\n      i.which,\n      'Hash'\n    ) as keyof SingleTableDocument<T>,\n\n    sortKeyFields: i.sortKeyFields,\n    sortKeyDescriptor: queryName,\n    sortKeyAttribute: getGSIAttributeName(\n      i.which,\n      'Sort'\n    ) as keyof SingleTableDocument<T>,\n\n    indexName: getGSIName(i.which),\n\n    type: 'globalSecondaryIndex',\n\n    tag: queryName,\n  };\n}\n\ntype PrimaryQueryArg = {\n  isPrimary: true;\n};\n\ntype LSIQueryArg<T> = {\n  sortKeyFields: PropList<T>;\n  type?: 'localSecondaryIndex';\n  which: 0 | 1 | 2 | 3 | 4;\n};\n\ntype GSIQueryArg<T> = {\n  sortKeyFields: PropList<T>;\n  hashKeyFields: PropList<T>;\n  type?: 'globalSecondaryIndex';\n  which:\n    | 0\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19;\n};\n\nexport type ConfigArgs<ID, T, QueryNames = string> = {\n  tableName?: string;\n  objectName: string;\n  hashKeyFields: PropList<ID>;\n  sortKeyFields?: PropList<ID>;\n  compositeKeySeparator?: '#';\n  queries?: Record<\n    Extract<QueryNames, string>,\n    GSIQueryArg<T> | LSIQueryArg<T> | PrimaryQueryArg\n  >;\n};\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport function getConfig<ID, T>(\n  argsIn: PartialBy<ConfigArgs<ID, T>, 'queries'>\n): Config<ID, T> {\n  const args: ConfigArgs<ID, T> = Object.assign({ queries: {} }, argsIn);\n  let indexes = [\n    getPrimaryIndex(args),\n    ...(args.queries\n      ? Object.keys(args.queries).map(queryName =>\n          convertQueryArgToIndex(queryName, args)\n        )\n      : []),\n  ];\n\n  let indexesByTag = indexes.reduce((prev, index) => {\n    return {\n      ...prev,\n      [index.tag as string]: index,\n    };\n  }, {});\n\n  return Object.assign(\n    {\n      tableName: args.tableName || getDefaultTableName(),\n      compositeKeySeparator: args.compositeKeySeparator || '#',\n    },\n    {\n      objectName: args.objectName,\n      primaryIndex: indexes[0],\n      indexes,\n      indexesByTag,\n    }\n  );\n}\n\nexport type Config<ID, T, QueryNames = string> = Readonly<{\n  tableName: string;\n  objectName: string;\n  primaryIndex: Index<ID, T>;\n  indexes: Index<ID, T>[];\n  indexesByTag: Record<Extract<QueryNames, string>, Index<ID, T>>;\n  compositeKeySeparator: string;\n}>;\n","import { getDocClient } from './AWS';\nimport { SingleTableDocument } from './SingleTableDocument';\nimport { ConfigArgs, Index, Config, getConfig } from './config';\nimport { KeyOfStr } from './utils';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\n\nexport type WhereClause<T = any, QueryNames = string> = {\n  sort?: 'asc' | 'desc';\n  args: Partial<T>;\n  index?: QueryNames;\n  sortBy?: KeyOfStr<T>;\n  cursor?: Record<string, any>;\n  limit?: number;\n};\n\nexport type QueryResult<T> = {\n  results: T[];\n  nextPageArgs?: WhereClause<T>;\n};\n\n/**\n *\n * @param thing\n * @param properties\n * @param descriptor\n * @param separator\n *\n * return \"{descriptor}#{properties[0]}-{thing[properties[0]]}#...\"\n */\nexport function getCompositeKeyValue<ID, T>(\n  thing: T,\n  properties: (keyof T | keyof ID)[],\n  descriptor: string,\n  separator: string\n) {\n  return [\n    descriptor,\n    ...properties.map(k =>\n      dynamoProperty(k as string, (thing[k as keyof T] as unknown) as string)\n    ),\n  ].join(separator);\n}\n\n/**\n *\n * To make generic dynamo fields more readable, they are saved in the following format\n * <fieldName>-<fieldValue>, eg userId-2039848932\n *\n * This function should be used whenever saving attributes to a composite index\n *\n * @param key\n * @param value\n */\nexport function dynamoProperty(key: string, value: string) {\n  return `${key}-${value}`;\n}\n\nexport function getSortkeyForBeginsWithQuery<ID, T>(\n  thing: Partial<T>,\n  indexFields: (keyof T | keyof ID)[],\n  descriptor: string,\n  compositeKeySeparator: string\n) {\n  let fields = [descriptor];\n  for (let i = 0; i < indexFields.length; i++) {\n    let k = indexFields[i];\n    if (k in thing) {\n      fields.push(dynamoProperty(k as string, String(thing[k as keyof T])));\n    } else {\n      break;\n    }\n  }\n  return fields.join(compositeKeySeparator);\n}\n\nexport function findIndexForQuery<ID, T, QueryNames>(\n  where: WhereClause<T>,\n  config: Config<ID, T, QueryNames>\n): Index<ID, T> | null {\n  if (where.index) {\n    if (config.indexesByTag[(where.index as unknown) as any]) {\n      return config.indexesByTag[(where.index as unknown) as any];\n    } else {\n      throw {\n        message: `The index \"${\n          where.index\n        }\" does not exist, the following are valid indexes: ${Object.keys(\n          config.indexesByTag\n        ).join(',')}`,\n      };\n    }\n  }\n\n  let indexes = config.indexes;\n\n  for (let i = 0; i < indexes.length; i++) {\n    let index = indexes[i];\n    let neededFields = new Set(Object.keys(where.args) as (\n      | keyof ID\n      | keyof T)[]);\n\n    //for this index to be eligible, we need every hashKey field to be provided in the query\n    let queryContainsAllHashKeyFields = index.hashKeyFields.every(k =>\n      neededFields.has(k)\n    );\n\n    //query contains all hash key fields\n    if (queryContainsAllHashKeyFields) {\n      index.hashKeyFields.forEach(k => neededFields.delete(k));\n      const sortKeyFieldIndex = neededFields.size;\n      //ensure that the first n fields of this index are included in the where clause\n      index.sortKeyFields\n        .slice(0, neededFields.size)\n        .forEach(k => neededFields.delete(k));\n\n      //all the specified fields are in the correct place for this index\n      if (neededFields.size === 0) {\n        //check if this config has a sort and if it's in the right place\n        if (where.sortBy) {\n          if (index.sortKeyFields.indexOf(where.sortBy) === sortKeyFieldIndex) {\n            return index;\n          }\n        } else {\n          return index;\n        }\n      }\n    }\n  }\n  return null;\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nfunction getKey<ID, T>(\n  id: ID | T,\n  i: Index<ID, T>,\n  separator: string\n): Partial<Omit<SingleTableDocument<T>, 'data'>> {\n  return {\n    [i.hashKeyAttribute]: getCompositeKeyValue(\n      id as any,\n      i.hashKeyFields as (keyof ID)[],\n      i.hashKeyDescriptor,\n      separator\n    ),\n    [i.sortKeyAttribute]: getCompositeKeyValue(\n      id as any,\n      i.sortKeyFields as (keyof ID)[],\n      i.sortKeyDescriptor,\n      separator\n    ),\n  };\n}\n\ntype Queries<T, QueryNames> = Record<\n  Extract<QueryNames, string>,\n  (where: WhereClause<T>) => Promise<QueryResult<T>>\n>;\n\nexport type Repository<ID = any, T = any, QueryNames = string> = {\n  config: Config<ID, T>;\n  getKey: (id: ID) => any;\n  get: (id: ID) => Promise<T | null>;\n  update: (id: ID, updates: Partial<T>) => Promise<T>;\n  overwrite: (thing: T) => Promise<T>;\n  put: (thing: T) => Promise<T>;\n  delete: (id: ID) => Promise<boolean>;\n  formatForDDB: (thing: T) => SingleTableDocument<T>;\n  executeQuery: (\n    where: WhereClause<T>,\n    index: Index<ID, T>\n  ) => Promise<QueryResult<T>>;\n  getQueryArgs(where: WhereClause<T>, index: Index<ID,T>): DocumentClient.QueryInput \n  query: (where: WhereClause<T>) => Promise<QueryResult<T>>;\n  queryOne: (where: WhereClause<T>) => Promise<T | null>;\n  findIndexForQuery: (where: WhereClause<T>) => Index<ID, T> | null;\n  queries: Queries<T, QueryNames>;\n};\n\n//const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport function getRepository<ID, T, QueryNames = string>(\n  args: ConfigArgs<ID, T, QueryNames>\n): Repository<ID, T, QueryNames> {\n  let config = getConfig(args);\n  let repo: Repository<ID, T, QueryNames> = {\n    get config() {\n      return config;\n    },\n    getKey: (id: ID) => {\n      return getKey(id, config.primaryIndex, config.compositeKeySeparator);\n    },\n    get: async (id: ID): Promise<T | null> => {\n      let res = await getDocClient()\n        .get({\n          TableName: config.tableName,\n          Key: repo.getKey(id),\n        })\n        .promise();\n      if (!res.Item) {\n        return null;\n      }\n      return (res.Item as any).data;\n    },\n    update: async (id: ID, thing: Partial<T>): Promise<T> => {\n      let old = (await repo.get(id)) as T;\n      let updated = { ...old, ...thing };\n      return repo.overwrite(updated);\n    },\n    put: (thing: T): Promise<T> => {\n      return repo.overwrite(thing);\n    },\n    overwrite: async (thing: T): Promise<T> => {\n      await getDocClient()\n        .put({\n          TableName: config.tableName,\n          Item: repo.formatForDDB(thing),\n        })\n        .promise();\n      return thing;\n    },\n    delete: async (id: ID): Promise<boolean> => {\n      await getDocClient()\n        .delete({\n          TableName: config.tableName,\n          Key: repo.getKey(id),\n        })\n        .promise();\n\n      return true;\n    },\n    getQueryArgs(where: WhereClause<T>, index: Index<ID,T>): DocumentClient.QueryInput {\n      const hashKey = getCompositeKeyValue<ID, T>(\n        where.args as T,\n        index.hashKeyFields,\n        index.hashKeyDescriptor,\n        config.compositeKeySeparator\n      );\n      const sortKey =\n        index.sortKeyFields &&\n        getSortkeyForBeginsWithQuery<ID, T>(\n          where.args,\n          index.sortKeyFields,\n          index.sortKeyDescriptor,\n          config.compositeKeySeparator\n        );\n\n      return {\n          TableName: config.tableName,\n          ...((index as any).indexName && {\n            IndexName: (index as any).indexName,\n          }),\n          Limit: where.limit || 5,\n          ScanIndexForward: where.sort === 'asc',\n          KeyConditionExpression: `${index.hashKeyAttribute} = :hKey and begins_with(${index.sortKeyAttribute}, :sKey) `,\n          ExpressionAttributeValues: {\n            ':hKey': hashKey,\n            ':sKey': sortKey,\n          },\n          ...(where.cursor && {\n            ExclusiveStartKey: where.cursor,\n          }),\n        };\n    },\n    executeQuery: async (\n      where: WhereClause<T>,\n      index: Index<ID, T>\n    ): Promise<QueryResult<T>> => {\n      \n      let res = await getDocClient()\n        .query(repo.getQueryArgs(where, index))\n        .promise();\n\n      let nextWhere: WhereClause<T> | undefined = res &&\n        res.LastEvaluatedKey && {\n          ...where,\n          cursor: (res as any).LastEvaluatedKey,\n        };\n\n      return {\n        results: (res as any).Items.map((i: SingleTableDocument<T>) => {\n          return i.data;\n        }),\n        nextPageArgs: nextWhere,\n      };\n    },\n    query: async (where: WhereClause<T>): Promise<QueryResult<T>> => {\n      let index = findIndexForQuery<ID, T, QueryNames>(where, config);\n\n      if (!index) {\n        throw { message: 'there isnt an index configured for this query' };\n      }\n\n      return repo.executeQuery(where, index);\n    },\n    queryOne: async (argsIn: WhereClause<T>): Promise<T | null> => {\n      const args = { ...argsIn, limit: 1 };\n      const res = await repo.query(args);\n      if (res.results.length > 0) {\n        return res.results[0];\n      } else {\n        return null;\n      }\n    },\n    formatForDDB(thing: T) {\n      let obj: Partial<SingleTableDocument<T>> = {\n        data: thing,\n        objectType: config.objectName,\n      };\n\n      config.indexes.forEach(i => {\n        obj = {\n          ...obj,\n          ...getKey(thing, i, config.compositeKeySeparator),\n        };\n      });\n\n      return obj as SingleTableDocument<T>;\n    },\n    findIndexForQuery: (where: WhereClause<T>) => {\n      return findIndexForQuery<ID, T, QueryNames>(where, config);\n    },\n    queries: Object.keys(config.indexesByTag).reduce(\n      (obj: any, key: string) => {\n        obj[key] = (where: WhereClause<T>) =>\n          repo.executeQuery(where, config.indexesByTag[key]);\n        return obj;\n      },\n      {}\n    ) as Queries<T, QueryNames>,\n  };\n  return repo;\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { AWS } from './AWS';\nimport { Repository } from './getRepository';\nimport { Index } from './config';\nimport { createTable, getGSIDef } from './createTable';\n\nexport async function ensureTableAndIndexesExist(repos: Repository[]) {\n  console.log(AWS.config.region);\n  let tables: {\n    [tableName: string]: {\n      [indexName: string]: Index<any, any>;\n    };\n  } = {};\n\n  repos\n    .map(c => c.config)\n    .forEach(c => {\n      if (!tables[c.tableName]) {\n        tables[c.tableName] = {};\n      }\n      c.indexes.forEach(i => {\n        if (i.type === 'globalSecondaryIndex') {\n          tables[c.tableName][i.indexName] = i;\n        }\n      });\n    });\n\n  let tableNames = Object.keys(tables);\n\n  for (let i = 0; i < tableNames.length; i++) {\n    let tableName = tableNames[i];\n    await ensureTableIsConfigured(tableNames[i], tables[tableName]);\n  }\n}\n\nasync function getTableDescription(\n  client: AWS.DynamoDB,\n  tableName: string\n): Promise<AWS.DynamoDB.TableDescription | null> {\n  try {\n    let description = await client\n      .describeTable({ TableName: tableName })\n      .promise();\n\n    if (description.Table) {\n      console.log('returning table description!!!!');\n      return description.Table;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  console.log('returning nullll');\n  return null;\n}\n\nasync function ensureTableIsConfigured(\n  tableName: string,\n  indexes: Record<string, Index<any, any>>\n) {\n  const client = new AWS.DynamoDB();\n  console.log(`checking if the table \"${tableName}\" has already been created`);\n\n  let table = await getTableDescription(client, tableName);\n  let indexesToBeCreated = { ...indexes };\n\n  if (!table) {\n    let ins = Object.values(indexesToBeCreated);\n    console.log(`table \"${tableName}\" does not exist, creating it now`);\n    await createTable({ tableName, indexes: ins });\n    console.log(\n      `table \"${tableName}\" created with the following indexes ${Object.keys(\n        indexesToBeCreated\n      ).join(',')}`\n    );\n    return;\n  }\n\n  console.log(`table \"${tableName}\" already exists, checking the indexes`);\n\n  if (table) {\n    (table.GlobalSecondaryIndexes || []).forEach(i => {\n      delete indexesToBeCreated[i.IndexName || ''];\n    });\n  }\n  let toCreate = Object.values(indexesToBeCreated);\n  if (toCreate.length > 0) {\n    console.log(\n      `creating the following indexes ${Object.keys(indexesToBeCreated).join(\n        ','\n      )} to table ${tableName}`\n    );\n    await client\n      .updateTable({\n        TableName: tableName,\n        GlobalSecondaryIndexUpdates: toCreate.map(i => ({\n          Create: getGSIDef(i),\n        })),\n      })\n      .promise();\n  } else {\n    console.log(`the table ${tableName} has all the necessary indexes`);\n  }\n}\n"],"names":["_docClient","AWS","DynamoDB","DocumentClient","getDocClient","getLSIName","which","getLSISortKeyAttribute","getGSIAttributeName","type","defaultTableName","getDefaultTableName","getGSIDef","index","IndexName","indexName","KeySchema","AttributeName","hashKeyAttribute","KeyType","sortKeyAttribute","Projection","ProjectionType","NonKeyAttributes","message","getPrimaryIndex","config","tag","hashKeyFields","hashKeyDescriptor","objectName","sortKeyFields","sortKeyDescriptor","getCompositeKeyValue","thing","properties","descriptor","separator","map","k","dynamoProperty","join","key","value","findIndexForQuery","where","indexesByTag","Object","keys","indexes","i","neededFields","Set","args","every","has","forEach","sortKeyFieldIndex","size","slice","sortBy","indexOf","length","getKey","id","_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","pact","bind","observer","Symbol","iterator","asyncIterator","ops","update","repos","console","log","region","tables","c","tableName","tableNames","array","body","check","reject","_cycle","thenable","client","recover","describeTable","TableName","promise","description","Table","getTableDescription","table","GlobalSecondaryIndexes","indexesToBeCreated","toCreate","values","updateTable","GlobalSecondaryIndexUpdates","Create","ins","localSecondaryIndexes","start","end","nums","push","range","sortKeyAttributeName","globalSecondaryIndexes","createTableInput","AttributeDefinitions","AttributeType","LocalSecondaryIndexes","BillingMode","createTable","ensureTableIsConfigured","argsIn","assign","queries","queryName","isPrimary","isLSIQueryArg","getLSIIndex","isGSIQueryArg","getGSIIndex","convertQueryArgToIndex","reduce","prev","compositeKeySeparator","primaryIndex","getConfig","repo","get","Key","res","Item","data","old","updated","overwrite","put","formatForDDB","getQueryArgs","hashKey","sortKey","indexFields","fields","String","getSortkeyForBeginsWithQuery","Limit","limit","ScanIndexForward","sort","KeyConditionExpression","ExpressionAttributeValues","cursor","ExclusiveStartKey","executeQuery","query","nextWhere","LastEvaluatedKey","results","Items","nextPageArgs","queryOne","obj","objectType","newName"],"mappings":"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"}